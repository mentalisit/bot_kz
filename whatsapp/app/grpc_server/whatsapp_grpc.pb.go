// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: whatsapp.proto

package grpc_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WhatsappService_DeleteMessage_FullMethodName           = "/wa.WhatsappService/DeleteMessage"
	WhatsappService_DeleteMessageSecond_FullMethodName     = "/wa.WhatsappService/DeleteMessageSecond"
	WhatsappService_EditMessage_FullMethodName             = "/wa.WhatsappService/EditMessage"
	WhatsappService_EditMessageTextKey_FullMethodName      = "/wa.WhatsappService/EditMessageTextKey"
	WhatsappService_CheckAdmin_FullMethodName              = "/wa.WhatsappService/CheckAdmin"
	WhatsappService_GetAvatarUrl_FullMethodName            = "/wa.WhatsappService/GetAvatarUrl"
	WhatsappService_Send_FullMethodName                    = "/wa.WhatsappService/Send"
	WhatsappService_SendPoll_FullMethodName                = "/wa.WhatsappService/SendPoll"
	WhatsappService_SendChannelDelSecond_FullMethodName    = "/wa.WhatsappService/SendChannelDelSecond"
	WhatsappService_SendHelp_FullMethodName                = "/wa.WhatsappService/SendHelp"
	WhatsappService_SendEmbedText_FullMethodName           = "/wa.WhatsappService/SendEmbedText"
	WhatsappService_SendEmbedTime_FullMethodName           = "/wa.WhatsappService/SendEmbedTime"
	WhatsappService_SendChannelTyping_FullMethodName       = "/wa.WhatsappService/SendChannelTyping"
	WhatsappService_SendPic_FullMethodName                 = "/wa.WhatsappService/SendPic"
	WhatsappService_SendBridgeArrayMessages_FullMethodName = "/wa.WhatsappService/SendBridgeArrayMessages"
	WhatsappService_SendPicScoreboard_FullMethodName       = "/wa.WhatsappService/SendPicScoreboard"
)

// WhatsappServiceClient is the client API for WhatsappService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhatsappServiceClient interface {
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	DeleteMessageSecond(ctx context.Context, in *DeleteMessageSecondRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	EditMessageTextKey(ctx context.Context, in *EditMessageTextKeyRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	CheckAdmin(ctx context.Context, in *CheckAdminRequest, opts ...grpc.CallOption) (*FlagResponse, error)
	GetAvatarUrl(ctx context.Context, in *GetAvatarUrlRequest, opts ...grpc.CallOption) (*TextResponse, error)
	Send(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendPoll(ctx context.Context, in *SendPollRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendChannelDelSecond(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*FlagResponse, error)
	SendHelp(ctx context.Context, in *SendHelpRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendEmbedText(ctx context.Context, in *SendEmbedRequest, opts ...grpc.CallOption) (*IntResponse, error)
	SendEmbedTime(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*IntResponse, error)
	SendChannelTyping(ctx context.Context, in *SendChannelTypingRequest, opts ...grpc.CallOption) (*Empty, error)
	SendPic(ctx context.Context, in *SendPicRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	SendBridgeArrayMessages(ctx context.Context, in *SendBridgeArrayMessagesRequest, opts ...grpc.CallOption) (*SendBridgeArrayMessagesResponse, error)
	SendPicScoreboard(ctx context.Context, in *ScoreboardRequest, opts ...grpc.CallOption) (*ScoreboardResponse, error)
}

type whatsappServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhatsappServiceClient(cc grpc.ClientConnInterface) WhatsappServiceClient {
	return &whatsappServiceClient{cc}
}

func (c *whatsappServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, WhatsappService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) DeleteMessageSecond(ctx context.Context, in *DeleteMessageSecondRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, WhatsappService_DeleteMessageSecond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, WhatsappService_EditMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) EditMessageTextKey(ctx context.Context, in *EditMessageTextKeyRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, WhatsappService_EditMessageTextKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) CheckAdmin(ctx context.Context, in *CheckAdminRequest, opts ...grpc.CallOption) (*FlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlagResponse)
	err := c.cc.Invoke(ctx, WhatsappService_CheckAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) GetAvatarUrl(ctx context.Context, in *GetAvatarUrlRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, WhatsappService_GetAvatarUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) Send(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, WhatsappService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) SendPoll(ctx context.Context, in *SendPollRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, WhatsappService_SendPoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) SendChannelDelSecond(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*FlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlagResponse)
	err := c.cc.Invoke(ctx, WhatsappService_SendChannelDelSecond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) SendHelp(ctx context.Context, in *SendHelpRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, WhatsappService_SendHelp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) SendEmbedText(ctx context.Context, in *SendEmbedRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WhatsappService_SendEmbedText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) SendEmbedTime(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WhatsappService_SendEmbedTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) SendChannelTyping(ctx context.Context, in *SendChannelTypingRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, WhatsappService_SendChannelTyping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) SendPic(ctx context.Context, in *SendPicRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, WhatsappService_SendPic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) SendBridgeArrayMessages(ctx context.Context, in *SendBridgeArrayMessagesRequest, opts ...grpc.CallOption) (*SendBridgeArrayMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBridgeArrayMessagesResponse)
	err := c.cc.Invoke(ctx, WhatsappService_SendBridgeArrayMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsappServiceClient) SendPicScoreboard(ctx context.Context, in *ScoreboardRequest, opts ...grpc.CallOption) (*ScoreboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoreboardResponse)
	err := c.cc.Invoke(ctx, WhatsappService_SendPicScoreboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhatsappServiceServer is the server API for WhatsappService service.
// All implementations must embed UnimplementedWhatsappServiceServer
// for forward compatibility.
type WhatsappServiceServer interface {
	DeleteMessage(context.Context, *DeleteMessageRequest) (*ErrorResponse, error)
	DeleteMessageSecond(context.Context, *DeleteMessageSecondRequest) (*ErrorResponse, error)
	EditMessage(context.Context, *EditMessageRequest) (*ErrorResponse, error)
	EditMessageTextKey(context.Context, *EditMessageTextKeyRequest) (*ErrorResponse, error)
	CheckAdmin(context.Context, *CheckAdminRequest) (*FlagResponse, error)
	GetAvatarUrl(context.Context, *GetAvatarUrlRequest) (*TextResponse, error)
	Send(context.Context, *SendMessageRequest) (*TextResponse, error)
	SendPoll(context.Context, *SendPollRequest) (*TextResponse, error)
	SendChannelDelSecond(context.Context, *SendMessageRequest) (*FlagResponse, error)
	SendHelp(context.Context, *SendHelpRequest) (*TextResponse, error)
	SendEmbedText(context.Context, *SendEmbedRequest) (*IntResponse, error)
	SendEmbedTime(context.Context, *SendMessageRequest) (*IntResponse, error)
	SendChannelTyping(context.Context, *SendChannelTypingRequest) (*Empty, error)
	SendPic(context.Context, *SendPicRequest) (*ErrorResponse, error)
	SendBridgeArrayMessages(context.Context, *SendBridgeArrayMessagesRequest) (*SendBridgeArrayMessagesResponse, error)
	SendPicScoreboard(context.Context, *ScoreboardRequest) (*ScoreboardResponse, error)
	mustEmbedUnimplementedWhatsappServiceServer()
}

// UnimplementedWhatsappServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWhatsappServiceServer struct{}

func (UnimplementedWhatsappServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedWhatsappServiceServer) DeleteMessageSecond(context.Context, *DeleteMessageSecondRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessageSecond not implemented")
}
func (UnimplementedWhatsappServiceServer) EditMessage(context.Context, *EditMessageRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedWhatsappServiceServer) EditMessageTextKey(context.Context, *EditMessageTextKeyRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessageTextKey not implemented")
}
func (UnimplementedWhatsappServiceServer) CheckAdmin(context.Context, *CheckAdminRequest) (*FlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAdmin not implemented")
}
func (UnimplementedWhatsappServiceServer) GetAvatarUrl(context.Context, *GetAvatarUrlRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatarUrl not implemented")
}
func (UnimplementedWhatsappServiceServer) Send(context.Context, *SendMessageRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedWhatsappServiceServer) SendPoll(context.Context, *SendPollRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPoll not implemented")
}
func (UnimplementedWhatsappServiceServer) SendChannelDelSecond(context.Context, *SendMessageRequest) (*FlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChannelDelSecond not implemented")
}
func (UnimplementedWhatsappServiceServer) SendHelp(context.Context, *SendHelpRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHelp not implemented")
}
func (UnimplementedWhatsappServiceServer) SendEmbedText(context.Context, *SendEmbedRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmbedText not implemented")
}
func (UnimplementedWhatsappServiceServer) SendEmbedTime(context.Context, *SendMessageRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmbedTime not implemented")
}
func (UnimplementedWhatsappServiceServer) SendChannelTyping(context.Context, *SendChannelTypingRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChannelTyping not implemented")
}
func (UnimplementedWhatsappServiceServer) SendPic(context.Context, *SendPicRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPic not implemented")
}
func (UnimplementedWhatsappServiceServer) SendBridgeArrayMessages(context.Context, *SendBridgeArrayMessagesRequest) (*SendBridgeArrayMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBridgeArrayMessages not implemented")
}
func (UnimplementedWhatsappServiceServer) SendPicScoreboard(context.Context, *ScoreboardRequest) (*ScoreboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPicScoreboard not implemented")
}
func (UnimplementedWhatsappServiceServer) mustEmbedUnimplementedWhatsappServiceServer() {}
func (UnimplementedWhatsappServiceServer) testEmbeddedByValue()                         {}

// UnsafeWhatsappServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhatsappServiceServer will
// result in compilation errors.
type UnsafeWhatsappServiceServer interface {
	mustEmbedUnimplementedWhatsappServiceServer()
}

func RegisterWhatsappServiceServer(s grpc.ServiceRegistrar, srv WhatsappServiceServer) {
	// If the following call pancis, it indicates UnimplementedWhatsappServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WhatsappService_ServiceDesc, srv)
}

func _WhatsappService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_DeleteMessageSecond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageSecondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).DeleteMessageSecond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_DeleteMessageSecond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).DeleteMessageSecond(ctx, req.(*DeleteMessageSecondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_EditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).EditMessage(ctx, req.(*EditMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_EditMessageTextKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageTextKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).EditMessageTextKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_EditMessageTextKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).EditMessageTextKey(ctx, req.(*EditMessageTextKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_CheckAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).CheckAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_CheckAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).CheckAdmin(ctx, req.(*CheckAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_GetAvatarUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvatarUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).GetAvatarUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_GetAvatarUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).GetAvatarUrl(ctx, req.(*GetAvatarUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).Send(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_SendPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).SendPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_SendPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).SendPoll(ctx, req.(*SendPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_SendChannelDelSecond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).SendChannelDelSecond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_SendChannelDelSecond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).SendChannelDelSecond(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_SendHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendHelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).SendHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_SendHelp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).SendHelp(ctx, req.(*SendHelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_SendEmbedText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmbedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).SendEmbedText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_SendEmbedText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).SendEmbedText(ctx, req.(*SendEmbedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_SendEmbedTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).SendEmbedTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_SendEmbedTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).SendEmbedTime(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_SendChannelTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChannelTypingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).SendChannelTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_SendChannelTyping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).SendChannelTyping(ctx, req.(*SendChannelTypingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_SendPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).SendPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_SendPic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).SendPic(ctx, req.(*SendPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_SendBridgeArrayMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBridgeArrayMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).SendBridgeArrayMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_SendBridgeArrayMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).SendBridgeArrayMessages(ctx, req.(*SendBridgeArrayMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsappService_SendPicScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsappServiceServer).SendPicScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsappService_SendPicScoreboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsappServiceServer).SendPicScoreboard(ctx, req.(*ScoreboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WhatsappService_ServiceDesc is the grpc.ServiceDesc for WhatsappService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhatsappService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wa.WhatsappService",
	HandlerType: (*WhatsappServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteMessage",
			Handler:    _WhatsappService_DeleteMessage_Handler,
		},
		{
			MethodName: "DeleteMessageSecond",
			Handler:    _WhatsappService_DeleteMessageSecond_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _WhatsappService_EditMessage_Handler,
		},
		{
			MethodName: "EditMessageTextKey",
			Handler:    _WhatsappService_EditMessageTextKey_Handler,
		},
		{
			MethodName: "CheckAdmin",
			Handler:    _WhatsappService_CheckAdmin_Handler,
		},
		{
			MethodName: "GetAvatarUrl",
			Handler:    _WhatsappService_GetAvatarUrl_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _WhatsappService_Send_Handler,
		},
		{
			MethodName: "SendPoll",
			Handler:    _WhatsappService_SendPoll_Handler,
		},
		{
			MethodName: "SendChannelDelSecond",
			Handler:    _WhatsappService_SendChannelDelSecond_Handler,
		},
		{
			MethodName: "SendHelp",
			Handler:    _WhatsappService_SendHelp_Handler,
		},
		{
			MethodName: "SendEmbedText",
			Handler:    _WhatsappService_SendEmbedText_Handler,
		},
		{
			MethodName: "SendEmbedTime",
			Handler:    _WhatsappService_SendEmbedTime_Handler,
		},
		{
			MethodName: "SendChannelTyping",
			Handler:    _WhatsappService_SendChannelTyping_Handler,
		},
		{
			MethodName: "SendPic",
			Handler:    _WhatsappService_SendPic_Handler,
		},
		{
			MethodName: "SendBridgeArrayMessages",
			Handler:    _WhatsappService_SendBridgeArrayMessages_Handler,
		},
		{
			MethodName: "SendPicScoreboard",
			Handler:    _WhatsappService_SendPicScoreboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whatsapp.proto",
}
