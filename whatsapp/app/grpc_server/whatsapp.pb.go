// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0--rc2
// source: whatsapp.proto

package grpc_server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextResponse) Reset() {
	*x = TextResponse{}
	mi := &file_whatsapp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextResponse) ProtoMessage() {}

func (x *TextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextResponse.ProtoReflect.Descriptor instead.
func (*TextResponse) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{0}
}

func (x *TextResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_whatsapp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type FlagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag bool `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *FlagResponse) Reset() {
	*x = FlagResponse{}
	mi := &file_whatsapp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagResponse) ProtoMessage() {}

func (x *FlagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagResponse.ProtoReflect.Descriptor instead.
func (*FlagResponse) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{2}
}

func (x *FlagResponse) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type DeleteMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Mesid  string `protobuf:"bytes,2,opt,name=mesid,proto3" json:"mesid,omitempty"`
}

func (x *DeleteMessageRequest) Reset() {
	*x = DeleteMessageRequest{}
	mi := &file_whatsapp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageRequest) ProtoMessage() {}

func (x *DeleteMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageRequest.ProtoReflect.Descriptor instead.
func (*DeleteMessageRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteMessageRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *DeleteMessageRequest) GetMesid() string {
	if x != nil {
		return x.Mesid
	}
	return ""
}

type DeleteMessageSecondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Mesid  string `protobuf:"bytes,2,opt,name=mesid,proto3" json:"mesid,omitempty"`
	Second int32  `protobuf:"varint,3,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *DeleteMessageSecondRequest) Reset() {
	*x = DeleteMessageSecondRequest{}
	mi := &file_whatsapp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageSecondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageSecondRequest) ProtoMessage() {}

func (x *DeleteMessageSecondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageSecondRequest.ProtoReflect.Descriptor instead.
func (*DeleteMessageSecondRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteMessageSecondRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *DeleteMessageSecondRequest) GetMesid() string {
	if x != nil {
		return x.Mesid
	}
	return ""
}

func (x *DeleteMessageSecondRequest) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type EditMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextEdit  string `protobuf:"bytes,1,opt,name=textEdit,proto3" json:"textEdit,omitempty"`
	ChatID    string `protobuf:"bytes,2,opt,name=chatID,proto3" json:"chatID,omitempty"`
	MID       string `protobuf:"bytes,3,opt,name=mID,proto3" json:"mID,omitempty"`
	ParseMode string `protobuf:"bytes,4,opt,name=parseMode,proto3" json:"parseMode,omitempty"`
}

func (x *EditMessageRequest) Reset() {
	*x = EditMessageRequest{}
	mi := &file_whatsapp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMessageRequest) ProtoMessage() {}

func (x *EditMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMessageRequest.ProtoReflect.Descriptor instead.
func (*EditMessageRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{5}
}

func (x *EditMessageRequest) GetTextEdit() string {
	if x != nil {
		return x.TextEdit
	}
	return ""
}

func (x *EditMessageRequest) GetChatID() string {
	if x != nil {
		return x.ChatID
	}
	return ""
}

func (x *EditMessageRequest) GetMID() string {
	if x != nil {
		return x.MID
	}
	return ""
}

func (x *EditMessageRequest) GetParseMode() string {
	if x != nil {
		return x.ParseMode
	}
	return ""
}

type EditMessageTextKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    string `protobuf:"bytes,1,opt,name=chatId,proto3" json:"chatId,omitempty"`
	EditMesId int32  `protobuf:"varint,2,opt,name=editMesId,proto3" json:"editMesId,omitempty"`
	TextEdit  string `protobuf:"bytes,3,opt,name=textEdit,proto3" json:"textEdit,omitempty"`
	Lvlkz     string `protobuf:"bytes,4,opt,name=lvlkz,proto3" json:"lvlkz,omitempty"`
}

func (x *EditMessageTextKeyRequest) Reset() {
	*x = EditMessageTextKeyRequest{}
	mi := &file_whatsapp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditMessageTextKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMessageTextKeyRequest) ProtoMessage() {}

func (x *EditMessageTextKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMessageTextKeyRequest.ProtoReflect.Descriptor instead.
func (*EditMessageTextKeyRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{6}
}

func (x *EditMessageTextKeyRequest) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *EditMessageTextKeyRequest) GetEditMesId() int32 {
	if x != nil {
		return x.EditMesId
	}
	return 0
}

func (x *EditMessageTextKeyRequest) GetTextEdit() string {
	if x != nil {
		return x.TextEdit
	}
	return ""
}

func (x *EditMessageTextKeyRequest) GetLvlkz() string {
	if x != nil {
		return x.Lvlkz
	}
	return ""
}

type CheckAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Chatid string `protobuf:"bytes,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
}

func (x *CheckAdminRequest) Reset() {
	*x = CheckAdminRequest{}
	mi := &file_whatsapp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAdminRequest) ProtoMessage() {}

func (x *CheckAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAdminRequest.ProtoReflect.Descriptor instead.
func (*CheckAdminRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{7}
}

func (x *CheckAdminRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CheckAdminRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

type GetAvatarUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (x *GetAvatarUrlRequest) Reset() {
	*x = GetAvatarUrlRequest{}
	mi := &file_whatsapp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvatarUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvatarUrlRequest) ProtoMessage() {}

func (x *GetAvatarUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvatarUrlRequest.ProtoReflect.Descriptor instead.
func (*GetAvatarUrlRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{8}
}

func (x *GetAvatarUrlRequest) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

type SendPollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Options []string          `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *SendPollRequest) Reset() {
	*x = SendPollRequest{}
	mi := &file_whatsapp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendPollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPollRequest) ProtoMessage() {}

func (x *SendPollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPollRequest.ProtoReflect.Descriptor instead.
func (*SendPollRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{9}
}

func (x *SendPollRequest) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendPollRequest) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	ChatID    string `protobuf:"bytes,2,opt,name=chatID,proto3" json:"chatID,omitempty"`
	ParseMode string `protobuf:"bytes,3,opt,name=parseMode,proto3" json:"parseMode,omitempty"`
	Second    int32  `protobuf:"varint,4,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	mi := &file_whatsapp_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{10}
}

func (x *SendMessageRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendMessageRequest) GetChatID() string {
	if x != nil {
		return x.ChatID
	}
	return ""
}

func (x *SendMessageRequest) GetParseMode() string {
	if x != nil {
		return x.ParseMode
	}
	return ""
}

func (x *SendMessageRequest) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type SendEmbedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId string `protobuf:"bytes,1,opt,name=chatId,proto3" json:"chatId,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Level  string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *SendEmbedRequest) Reset() {
	*x = SendEmbedRequest{}
	mi := &file_whatsapp_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEmbedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEmbedRequest) ProtoMessage() {}

func (x *SendEmbedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEmbedRequest.ProtoReflect.Descriptor instead.
func (*SendEmbedRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{11}
}

func (x *SendEmbedRequest) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *SendEmbedRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendEmbedRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type SendHelpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      string `protobuf:"bytes,1,opt,name=chatId,proto3" json:"chatId,omitempty"`
	Text        string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	OldMidHelps string `protobuf:"bytes,3,opt,name=oldMidHelps,proto3" json:"oldMidHelps,omitempty"`
	IfUser      bool   `protobuf:"varint,4,opt,name=ifUser,proto3" json:"ifUser,omitempty"`
}

func (x *SendHelpRequest) Reset() {
	*x = SendHelpRequest{}
	mi := &file_whatsapp_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendHelpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendHelpRequest) ProtoMessage() {}

func (x *SendHelpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendHelpRequest.ProtoReflect.Descriptor instead.
func (*SendHelpRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{12}
}

func (x *SendHelpRequest) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *SendHelpRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendHelpRequest) GetOldMidHelps() string {
	if x != nil {
		return x.OldMidHelps
	}
	return ""
}

func (x *SendHelpRequest) GetIfUser() bool {
	if x != nil {
		return x.IfUser
	}
	return false
}

type IntResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *IntResponse) Reset() {
	*x = IntResponse{}
	mi := &file_whatsapp_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntResponse) ProtoMessage() {}

func (x *IntResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntResponse.ProtoReflect.Descriptor instead.
func (*IntResponse) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{13}
}

func (x *IntResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type SendChannelTypingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
}

func (x *SendChannelTypingRequest) Reset() {
	*x = SendChannelTypingRequest{}
	mi := &file_whatsapp_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendChannelTypingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChannelTypingRequest) ProtoMessage() {}

func (x *SendChannelTypingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChannelTypingRequest.ProtoReflect.Descriptor instead.
func (*SendChannelTypingRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{14}
}

func (x *SendChannelTypingRequest) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

type SendPicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid     string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Text       string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ImageBytes []byte `protobuf:"bytes,3,opt,name=imageBytes,proto3" json:"imageBytes,omitempty"`
}

func (x *SendPicRequest) Reset() {
	*x = SendPicRequest{}
	mi := &file_whatsapp_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendPicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPicRequest) ProtoMessage() {}

func (x *SendPicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPicRequest.ProtoReflect.Descriptor instead.
func (*SendPicRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{15}
}

func (x *SendPicRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *SendPicRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendPicRequest) GetImageBytes() []byte {
	if x != nil {
		return x.ImageBytes
	}
	return nil
}

type SendBridgeArrayMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string              `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Username  string              `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	ChannelID []string            `protobuf:"bytes,3,rep,name=channelID,proto3" json:"channelID,omitempty"`
	Extra     []*FileInfo         `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty"`
	Avatar    string              `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	ReplyMap  map[string]string   `protobuf:"bytes,6,rep,name=reply_map,json=replyMap,proto3" json:"reply_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Reply     *BridgeMessageReply `protobuf:"bytes,7,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *SendBridgeArrayMessagesRequest) Reset() {
	*x = SendBridgeArrayMessagesRequest{}
	mi := &file_whatsapp_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendBridgeArrayMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBridgeArrayMessagesRequest) ProtoMessage() {}

func (x *SendBridgeArrayMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBridgeArrayMessagesRequest.ProtoReflect.Descriptor instead.
func (*SendBridgeArrayMessagesRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{16}
}

func (x *SendBridgeArrayMessagesRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendBridgeArrayMessagesRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SendBridgeArrayMessagesRequest) GetChannelID() []string {
	if x != nil {
		return x.ChannelID
	}
	return nil
}

func (x *SendBridgeArrayMessagesRequest) GetExtra() []*FileInfo {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *SendBridgeArrayMessagesRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *SendBridgeArrayMessagesRequest) GetReplyMap() map[string]string {
	if x != nil {
		return x.ReplyMap
	}
	return nil
}

func (x *SendBridgeArrayMessagesRequest) GetReply() *BridgeMessageReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Url    string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Size   int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	FileID string `protobuf:"bytes,5,opt,name=fileID,proto3" json:"fileID,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_whatsapp_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{17}
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

type BridgeMessageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeMessage int64  `protobuf:"varint,1,opt,name=time_message,json=timeMessage,proto3" json:"time_message,omitempty"`
	Text        string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Avatar      string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	UserName    string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *BridgeMessageReply) Reset() {
	*x = BridgeMessageReply{}
	mi := &file_whatsapp_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BridgeMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeMessageReply) ProtoMessage() {}

func (x *BridgeMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeMessageReply.ProtoReflect.Descriptor instead.
func (*BridgeMessageReply) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{18}
}

func (x *BridgeMessageReply) GetTimeMessage() int64 {
	if x != nil {
		return x.TimeMessage
	}
	return 0
}

func (x *BridgeMessageReply) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BridgeMessageReply) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *BridgeMessageReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type SendBridgeArrayMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIds []*MessageIds `protobuf:"bytes,1,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
}

func (x *SendBridgeArrayMessagesResponse) Reset() {
	*x = SendBridgeArrayMessagesResponse{}
	mi := &file_whatsapp_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendBridgeArrayMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBridgeArrayMessagesResponse) ProtoMessage() {}

func (x *SendBridgeArrayMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBridgeArrayMessagesResponse.ProtoReflect.Descriptor instead.
func (*SendBridgeArrayMessagesResponse) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{19}
}

func (x *SendBridgeArrayMessagesResponse) GetMessageIds() []*MessageIds {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

type MessageIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ChatId    string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *MessageIds) Reset() {
	*x = MessageIds{}
	mi := &file_whatsapp_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageIds) ProtoMessage() {}

func (x *MessageIds) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageIds.ProtoReflect.Descriptor instead.
func (*MessageIds) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{20}
}

func (x *MessageIds) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageIds) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_whatsapp_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{21}
}

type ScoreboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChaatId            string `protobuf:"bytes,1,opt,name=ChaatId,proto3" json:"ChaatId,omitempty"`
	Text               string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	FileNameScoreboard string `protobuf:"bytes,3,opt,name=fileNameScoreboard,proto3" json:"fileNameScoreboard,omitempty"`
}

func (x *ScoreboardRequest) Reset() {
	*x = ScoreboardRequest{}
	mi := &file_whatsapp_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreboardRequest) ProtoMessage() {}

func (x *ScoreboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreboardRequest.ProtoReflect.Descriptor instead.
func (*ScoreboardRequest) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{22}
}

func (x *ScoreboardRequest) GetChaatId() string {
	if x != nil {
		return x.ChaatId
	}
	return ""
}

func (x *ScoreboardRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ScoreboardRequest) GetFileNameScoreboard() string {
	if x != nil {
		return x.FileNameScoreboard
	}
	return ""
}

type ScoreboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid          string `protobuf:"bytes,1,opt,name=Mid,proto3" json:"Mid,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ScoreboardResponse) Reset() {
	*x = ScoreboardResponse{}
	mi := &file_whatsapp_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreboardResponse) ProtoMessage() {}

func (x *ScoreboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_whatsapp_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreboardResponse.ProtoReflect.Descriptor instead.
func (*ScoreboardResponse) Descriptor() ([]byte, []int) {
	return file_whatsapp_proto_rawDescGZIP(), []int{23}
}

func (x *ScoreboardResponse) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *ScoreboardResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_whatsapp_proto protoreflect.FileDescriptor

var file_whatsapp_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x77, 0x61, 0x22, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x34, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x22,
	0x0a, 0x0c, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x22, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x65, 0x73, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x65, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x65, 0x73, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x78, 0x0a, 0x12,
	0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x45, 0x64, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x76, 0x6c, 0x6b, 0x7a, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x76, 0x6c, 0x6b, 0x7a, 0x22, 0x3f, 0x0a, 0x11,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x22, 0x2d, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x22, 0x97, 0x01, 0x0a,
	0x0f, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x77, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x37, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x54,
	0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x77, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x6c, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x4d, 0x69, 0x64, 0x48, 0x65, 0x6c,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x4d, 0x69, 0x64,
	0x48, 0x65, 0x6c, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x22, 0x25, 0x0a,
	0x0b, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x38, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x5c,
	0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xe4, 0x02, 0x0a,
	0x1e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x77,
	0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77,
	0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x2e, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x70, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x7f, 0x0a, 0x12, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x1f, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x77, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x52, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22, 0x44, 0x0a, 0x0a, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x71, 0x0a, 0x11, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x61, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x68, 0x61, 0x61, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x4b, 0x0a, 0x12,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4d, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xf1, 0x07, 0x0a, 0x0f, 0x57, 0x68,
	0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x2e, 0x77, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x77, 0x61, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x1e, 0x2e, 0x77, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x77, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x77, 0x61, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x77,
	0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x2e, 0x77, 0x61, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x77, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x15, 0x2e, 0x77, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x77,
	0x61, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x17,
	0x2e, 0x77, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x77, 0x61, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e,
	0x64, 0x12, 0x16, 0x2e, 0x77, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x77, 0x61, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x53,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x13, 0x2e, 0x77, 0x61, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x77,
	0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x77, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x77, 0x61, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x13, 0x2e, 0x77,
	0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x77, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x2e, 0x77, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x77, 0x61, 0x2e,
	0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x77,
	0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x77, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x77, 0x61, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x12, 0x12,
	0x2e, 0x77, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x77, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x22, 0x2e, 0x77, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x15,
	0x2e, 0x77, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x77, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x11, 0x5a,
	0x0f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3b, 0x77, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_whatsapp_proto_rawDescOnce sync.Once
	file_whatsapp_proto_rawDescData = file_whatsapp_proto_rawDesc
)

func file_whatsapp_proto_rawDescGZIP() []byte {
	file_whatsapp_proto_rawDescOnce.Do(func() {
		file_whatsapp_proto_rawDescData = protoimpl.X.CompressGZIP(file_whatsapp_proto_rawDescData)
	})
	return file_whatsapp_proto_rawDescData
}

var file_whatsapp_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_whatsapp_proto_goTypes = []any{
	(*TextResponse)(nil),                    // 0: wa.TextResponse
	(*ErrorResponse)(nil),                   // 1: wa.ErrorResponse
	(*FlagResponse)(nil),                    // 2: wa.FlagResponse
	(*DeleteMessageRequest)(nil),            // 3: wa.DeleteMessageRequest
	(*DeleteMessageSecondRequest)(nil),      // 4: wa.DeleteMessageSecondRequest
	(*EditMessageRequest)(nil),              // 5: wa.EditMessageRequest
	(*EditMessageTextKeyRequest)(nil),       // 6: wa.EditMessageTextKeyRequest
	(*CheckAdminRequest)(nil),               // 7: wa.CheckAdminRequest
	(*GetAvatarUrlRequest)(nil),             // 8: wa.GetAvatarUrlRequest
	(*SendPollRequest)(nil),                 // 9: wa.SendPollRequest
	(*SendMessageRequest)(nil),              // 10: wa.SendMessageRequest
	(*SendEmbedRequest)(nil),                // 11: wa.SendEmbedRequest
	(*SendHelpRequest)(nil),                 // 12: wa.SendHelpRequest
	(*IntResponse)(nil),                     // 13: wa.IntResponse
	(*SendChannelTypingRequest)(nil),        // 14: wa.SendChannelTypingRequest
	(*SendPicRequest)(nil),                  // 15: wa.SendPicRequest
	(*SendBridgeArrayMessagesRequest)(nil),  // 16: wa.SendBridgeArrayMessagesRequest
	(*FileInfo)(nil),                        // 17: wa.FileInfo
	(*BridgeMessageReply)(nil),              // 18: wa.BridgeMessageReply
	(*SendBridgeArrayMessagesResponse)(nil), // 19: wa.SendBridgeArrayMessagesResponse
	(*MessageIds)(nil),                      // 20: wa.MessageIds
	(*Empty)(nil),                           // 21: wa.Empty
	(*ScoreboardRequest)(nil),               // 22: wa.ScoreboardRequest
	(*ScoreboardResponse)(nil),              // 23: wa.ScoreboardResponse
	nil,                                     // 24: wa.SendPollRequest.DataEntry
	nil,                                     // 25: wa.SendBridgeArrayMessagesRequest.ReplyMapEntry
}
var file_whatsapp_proto_depIdxs = []int32{
	24, // 0: wa.SendPollRequest.data:type_name -> wa.SendPollRequest.DataEntry
	17, // 1: wa.SendBridgeArrayMessagesRequest.extra:type_name -> wa.FileInfo
	25, // 2: wa.SendBridgeArrayMessagesRequest.reply_map:type_name -> wa.SendBridgeArrayMessagesRequest.ReplyMapEntry
	18, // 3: wa.SendBridgeArrayMessagesRequest.reply:type_name -> wa.BridgeMessageReply
	20, // 4: wa.SendBridgeArrayMessagesResponse.message_ids:type_name -> wa.MessageIds
	3,  // 5: wa.WhatsappService.DeleteMessage:input_type -> wa.DeleteMessageRequest
	4,  // 6: wa.WhatsappService.DeleteMessageSecond:input_type -> wa.DeleteMessageSecondRequest
	5,  // 7: wa.WhatsappService.EditMessage:input_type -> wa.EditMessageRequest
	6,  // 8: wa.WhatsappService.EditMessageTextKey:input_type -> wa.EditMessageTextKeyRequest
	7,  // 9: wa.WhatsappService.CheckAdmin:input_type -> wa.CheckAdminRequest
	8,  // 10: wa.WhatsappService.GetAvatarUrl:input_type -> wa.GetAvatarUrlRequest
	10, // 11: wa.WhatsappService.Send:input_type -> wa.SendMessageRequest
	9,  // 12: wa.WhatsappService.SendPoll:input_type -> wa.SendPollRequest
	10, // 13: wa.WhatsappService.SendChannelDelSecond:input_type -> wa.SendMessageRequest
	12, // 14: wa.WhatsappService.SendHelp:input_type -> wa.SendHelpRequest
	11, // 15: wa.WhatsappService.SendEmbedText:input_type -> wa.SendEmbedRequest
	10, // 16: wa.WhatsappService.SendEmbedTime:input_type -> wa.SendMessageRequest
	14, // 17: wa.WhatsappService.SendChannelTyping:input_type -> wa.SendChannelTypingRequest
	15, // 18: wa.WhatsappService.SendPic:input_type -> wa.SendPicRequest
	16, // 19: wa.WhatsappService.SendBridgeArrayMessages:input_type -> wa.SendBridgeArrayMessagesRequest
	22, // 20: wa.WhatsappService.SendPicScoreboard:input_type -> wa.ScoreboardRequest
	1,  // 21: wa.WhatsappService.DeleteMessage:output_type -> wa.ErrorResponse
	1,  // 22: wa.WhatsappService.DeleteMessageSecond:output_type -> wa.ErrorResponse
	1,  // 23: wa.WhatsappService.EditMessage:output_type -> wa.ErrorResponse
	1,  // 24: wa.WhatsappService.EditMessageTextKey:output_type -> wa.ErrorResponse
	2,  // 25: wa.WhatsappService.CheckAdmin:output_type -> wa.FlagResponse
	0,  // 26: wa.WhatsappService.GetAvatarUrl:output_type -> wa.TextResponse
	0,  // 27: wa.WhatsappService.Send:output_type -> wa.TextResponse
	0,  // 28: wa.WhatsappService.SendPoll:output_type -> wa.TextResponse
	2,  // 29: wa.WhatsappService.SendChannelDelSecond:output_type -> wa.FlagResponse
	0,  // 30: wa.WhatsappService.SendHelp:output_type -> wa.TextResponse
	13, // 31: wa.WhatsappService.SendEmbedText:output_type -> wa.IntResponse
	13, // 32: wa.WhatsappService.SendEmbedTime:output_type -> wa.IntResponse
	21, // 33: wa.WhatsappService.SendChannelTyping:output_type -> wa.Empty
	1,  // 34: wa.WhatsappService.SendPic:output_type -> wa.ErrorResponse
	19, // 35: wa.WhatsappService.SendBridgeArrayMessages:output_type -> wa.SendBridgeArrayMessagesResponse
	23, // 36: wa.WhatsappService.SendPicScoreboard:output_type -> wa.ScoreboardResponse
	21, // [21:37] is the sub-list for method output_type
	5,  // [5:21] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_whatsapp_proto_init() }
func file_whatsapp_proto_init() {
	if File_whatsapp_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_whatsapp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_whatsapp_proto_goTypes,
		DependencyIndexes: file_whatsapp_proto_depIdxs,
		MessageInfos:      file_whatsapp_proto_msgTypes,
	}.Build()
	File_whatsapp_proto = out.File
	file_whatsapp_proto_rawDesc = nil
	file_whatsapp_proto_goTypes = nil
	file_whatsapp_proto_depIdxs = nil
}
