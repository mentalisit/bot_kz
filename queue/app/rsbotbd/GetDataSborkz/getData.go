package GetDataSborkz

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"queue/models"
	"strconv"
	"time"
)

type Sborkz struct {
	Name      string `json:"name"`
	Userid    string `json:"userid"`
	Chatid    string `json:"chatid"`
	Timestamp string `json:"timestamp"`
	Lvlkz     string `json:"lvlkz"`
	Vid       string `json:"vid"`
	Timedown  string `json:"timedown"`
}

func ReadQueueTumchaNameIds() (namesIds []int64) {
	q, err := fetchDataSborkz()
	if err != nil {
		fmt.Println(err)
		return
	}
	for _, tumcha := range q {
		parseInt, _ := strconv.ParseInt(tumcha.Userid, 10, 64)
		if parseInt != 0 {
			namesIds = append(namesIds, parseInt)
		}
	}
	return namesIds
}

func GetData() (q []models.QueueStruct) {
	sborKz, err := fetchDataSborkz()
	if err != nil {
		fmt.Println(err)
		return
	}
	if len(sborKz) == 0 {
		return
	}

	lvl := func(t Sborkz) (s string) {
		if t.Vid == "black" {
			s = "drs"
		} else {
			s = "rs"
		}
		s += t.Lvlkz
		return s
	}

	rs := make(map[string][]Sborkz)
	for _, s := range sborKz {
		rs[s.Chatid] = append(rs[s.Chatid], s)
	}

	for cName, sbor := range rs {
		r := models.QueueStruct{
			CorpName: cName,
		}
		for _, s := range sbor {
			r.Level = lvl(s)
			r.Count = 1
			q = append(q, r)
		}
	}

	return q
}

//func fetchDataSborkz() ([]Sborkz, error) {
//	url := "https://123bot.ru/rssoyuzbot/Json/sborkz.php"
//	resp, err := http.Get(url)
//	if err != nil {
//		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
//	}
//	defer resp.Body.Close()
//
//	body, err := ioutil.ReadAll(resp.Body)
//	if err != nil {
//		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
//	}
//
//	var sborkz []Sborkz
//
//	if err := json.Unmarshal(body, &sborkz); err != nil {
//		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %w", err)
//	}
//
//	return sborkz, nil
//}

func fetchDataSborkz() ([]Sborkz, error) {
	url := "https://123bot.ru/rssoyuzbot/Json/sborkz.php"

	// 1. –°–æ–∑–¥–∞–Ω–∏–µ HTTP-–∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	client := http.Client{
		Timeout: 15 * time.Second, // üö® –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
	}

	// –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç http.Get, http.NewRequest –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequestWithContext(context.Background(), "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	// 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
	resp, err := client.Do(req)
	if err != nil {
		// –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ —Ç–∞–π–º–∞—É—Ç–æ–º –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–æ–π —Å–µ—Ç–∏
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç: %w", err)
	}
	defer resp.Body.Close()

	// 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ –æ—à–∏–±–∫–∏: %d", resp.StatusCode)
	}

	// 4. –ß—Ç–µ–Ω–∏–µ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º io.ReadAll
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}
	fmt.Println(string(body))
	// 5. –ü–∞—Ä—Å–∏–Ω–≥ JSON
	var sborkz []Sborkz
	if err := json.Unmarshal(body, &sborkz); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %w", err)
	}

	return sborkz, nil
}
