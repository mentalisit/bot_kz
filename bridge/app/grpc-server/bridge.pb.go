// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0--rc2
// source: bridge.proto

package grpc_server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Сообщение Bridge2Configs соответствует структуре Bridge2Configs
type Bridge2Configs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId       string            `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId         string            `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	CorpChannelName string            `protobuf:"bytes,3,opt,name=corp_channel_name,json=corpChannelName,proto3" json:"corp_channel_name,omitempty"`
	AliasName       string            `protobuf:"bytes,4,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	MappingRoles    map[string]string `protobuf:"bytes,5,rep,name=mapping_roles,json=mappingRoles,proto3" json:"mapping_roles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Bridge2Configs) Reset() {
	*x = Bridge2Configs{}
	mi := &file_bridge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bridge2Configs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bridge2Configs) ProtoMessage() {}

func (x *Bridge2Configs) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bridge2Configs.ProtoReflect.Descriptor instead.
func (*Bridge2Configs) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{0}
}

func (x *Bridge2Configs) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Bridge2Configs) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Bridge2Configs) GetCorpChannelName() string {
	if x != nil {
		return x.CorpChannelName
	}
	return ""
}

func (x *Bridge2Configs) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *Bridge2Configs) GetMappingRoles() map[string]string {
	if x != nil {
		return x.MappingRoles
	}
	return nil
}

// Сообщение Bridge2Config соответствует структуре Bridge2Config
type Bridge2Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Используем int32 или int64 для целых чисел
	NameRelay         string                                       `protobuf:"bytes,2,opt,name=name_relay,json=nameRelay,proto3" json:"name_relay,omitempty"`
	HostRelay         string                                       `protobuf:"bytes,3,opt,name=host_relay,json=hostRelay,proto3" json:"host_relay,omitempty"`
	Role              []string                                     `protobuf:"bytes,4,rep,name=role,proto3" json:"role,omitempty"`                                                                                               // Слайсы (Go slice) становятся repeated полями
	Channel           map[string]*Bridge2Config_Bridge2ConfigsList `protobuf:"bytes,5,rep,name=channel,proto3" json:"channel,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Вложенный map с помощью вспомогательной структуры
	ForbiddenPrefixes []string                                     `protobuf:"bytes,6,rep,name=forbidden_prefixes,json=forbiddenPrefixes,proto3" json:"forbidden_prefixes,omitempty"`
}

func (x *Bridge2Config) Reset() {
	*x = Bridge2Config{}
	mi := &file_bridge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bridge2Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bridge2Config) ProtoMessage() {}

func (x *Bridge2Config) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bridge2Config.ProtoReflect.Descriptor instead.
func (*Bridge2Config) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{1}
}

func (x *Bridge2Config) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bridge2Config) GetNameRelay() string {
	if x != nil {
		return x.NameRelay
	}
	return ""
}

func (x *Bridge2Config) GetHostRelay() string {
	if x != nil {
		return x.HostRelay
	}
	return ""
}

func (x *Bridge2Config) GetRole() []string {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Bridge2Config) GetChannel() map[string]*Bridge2Config_Bridge2ConfigsList {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *Bridge2Config) GetForbiddenPrefixes() []string {
	if x != nil {
		return x.ForbiddenPrefixes
	}
	return nil
}

// Сообщение для FileInfo
type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Url    string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Size   int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	FileId string `protobuf:"bytes,5,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_bridge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{2}
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

// Сообщение для BridgeMessageReply
type BridgeMessageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeMessage int64  `protobuf:"varint,1,opt,name=time_message,json=timeMessage,proto3" json:"time_message,omitempty"`
	Text        string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Avatar      string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	UserName    string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *BridgeMessageReply) Reset() {
	*x = BridgeMessageReply{}
	mi := &file_bridge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BridgeMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeMessageReply) ProtoMessage() {}

func (x *BridgeMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeMessageReply.ProtoReflect.Descriptor instead.
func (*BridgeMessageReply) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{3}
}

func (x *BridgeMessageReply) GetTimeMessage() int64 {
	if x != nil {
		return x.TimeMessage
	}
	return 0
}

func (x *BridgeMessageReply) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BridgeMessageReply) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *BridgeMessageReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// Сообщение для BridgeConfigDs
type BridgeConfigDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId       string            `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId         string            `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	CorpChannelName string            `protobuf:"bytes,3,opt,name=corp_channel_name,json=corpChannelName,proto3" json:"corp_channel_name,omitempty"`
	AliasName       string            `protobuf:"bytes,4,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	MappingRoles    map[string]string `protobuf:"bytes,5,rep,name=mapping_roles,json=mappingRoles,proto3" json:"mapping_roles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BridgeConfigDs) Reset() {
	*x = BridgeConfigDs{}
	mi := &file_bridge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BridgeConfigDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeConfigDs) ProtoMessage() {}

func (x *BridgeConfigDs) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeConfigDs.ProtoReflect.Descriptor instead.
func (*BridgeConfigDs) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{4}
}

func (x *BridgeConfigDs) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BridgeConfigDs) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *BridgeConfigDs) GetCorpChannelName() string {
	if x != nil {
		return x.CorpChannelName
	}
	return ""
}

func (x *BridgeConfigDs) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *BridgeConfigDs) GetMappingRoles() map[string]string {
	if x != nil {
		return x.MappingRoles
	}
	return nil
}

// Сообщение для BridgeConfigTg
type BridgeConfigTg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId       string            `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	CorpChannelName string            `protobuf:"bytes,2,opt,name=corp_channel_name,json=corpChannelName,proto3" json:"corp_channel_name,omitempty"`
	AliasName       string            `protobuf:"bytes,3,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	MappingRoles    map[string]string `protobuf:"bytes,4,rep,name=mapping_roles,json=mappingRoles,proto3" json:"mapping_roles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BridgeConfigTg) Reset() {
	*x = BridgeConfigTg{}
	mi := &file_bridge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BridgeConfigTg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeConfigTg) ProtoMessage() {}

func (x *BridgeConfigTg) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeConfigTg.ProtoReflect.Descriptor instead.
func (*BridgeConfigTg) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{5}
}

func (x *BridgeConfigTg) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BridgeConfigTg) GetCorpChannelName() string {
	if x != nil {
		return x.CorpChannelName
	}
	return ""
}

func (x *BridgeConfigTg) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *BridgeConfigTg) GetMappingRoles() map[string]string {
	if x != nil {
		return x.MappingRoles
	}
	return nil
}

// Сообщение для BridgeConfig
type BridgeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameRelay         string            `protobuf:"bytes,2,opt,name=name_relay,json=nameRelay,proto3" json:"name_relay,omitempty"`
	HostRelay         string            `protobuf:"bytes,3,opt,name=host_relay,json=hostRelay,proto3" json:"host_relay,omitempty"`
	Role              []string          `protobuf:"bytes,4,rep,name=role,proto3" json:"role,omitempty"`
	ChannelDs         []*BridgeConfigDs `protobuf:"bytes,5,rep,name=channel_ds,json=channelDs,proto3" json:"channel_ds,omitempty"`
	ChannelTg         []*BridgeConfigTg `protobuf:"bytes,6,rep,name=channel_tg,json=channelTg,proto3" json:"channel_tg,omitempty"`
	ForbiddenPrefixes []string          `protobuf:"bytes,7,rep,name=forbidden_prefixes,json=forbiddenPrefixes,proto3" json:"forbidden_prefixes,omitempty"`
}

func (x *BridgeConfig) Reset() {
	*x = BridgeConfig{}
	mi := &file_bridge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BridgeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeConfig) ProtoMessage() {}

func (x *BridgeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeConfig.ProtoReflect.Descriptor instead.
func (*BridgeConfig) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{6}
}

func (x *BridgeConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BridgeConfig) GetNameRelay() string {
	if x != nil {
		return x.NameRelay
	}
	return ""
}

func (x *BridgeConfig) GetHostRelay() string {
	if x != nil {
		return x.HostRelay
	}
	return ""
}

func (x *BridgeConfig) GetRole() []string {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *BridgeConfig) GetChannelDs() []*BridgeConfigDs {
	if x != nil {
		return x.ChannelDs
	}
	return nil
}

func (x *BridgeConfig) GetChannelTg() []*BridgeConfigTg {
	if x != nil {
		return x.ChannelTg
	}
	return nil
}

func (x *BridgeConfig) GetForbiddenPrefixes() []string {
	if x != nil {
		return x.ForbiddenPrefixes
	}
	return nil
}

// Основное сообщение для передачи данных в мост
type ToBridgeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        string              `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Sender      string              `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Tip         string              `protobuf:"bytes,3,opt,name=tip,proto3" json:"tip,omitempty"`
	ChatId      string              `protobuf:"bytes,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MesId       string              `protobuf:"bytes,5,opt,name=mes_id,json=mesId,proto3" json:"mes_id,omitempty"`
	GuildId     string              `protobuf:"bytes,6,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	TimeMessage int64               `protobuf:"varint,7,opt,name=time_message,json=timeMessage,proto3" json:"time_message,omitempty"`
	Extra       []*FileInfo         `protobuf:"bytes,8,rep,name=extra,proto3" json:"extra,omitempty"`
	Avatar      string              `protobuf:"bytes,9,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Reply       *BridgeMessageReply `protobuf:"bytes,10,opt,name=reply,proto3" json:"reply,omitempty"`
	ReplyMap    map[string]string   `protobuf:"bytes,11,rep,name=reply_map,json=replyMap,proto3" json:"reply_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config      *Bridge2Config      `protobuf:"bytes,12,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ToBridgeMessage) Reset() {
	*x = ToBridgeMessage{}
	mi := &file_bridge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToBridgeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToBridgeMessage) ProtoMessage() {}

func (x *ToBridgeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToBridgeMessage.ProtoReflect.Descriptor instead.
func (*ToBridgeMessage) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{7}
}

func (x *ToBridgeMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ToBridgeMessage) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *ToBridgeMessage) GetTip() string {
	if x != nil {
		return x.Tip
	}
	return ""
}

func (x *ToBridgeMessage) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *ToBridgeMessage) GetMesId() string {
	if x != nil {
		return x.MesId
	}
	return ""
}

func (x *ToBridgeMessage) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ToBridgeMessage) GetTimeMessage() int64 {
	if x != nil {
		return x.TimeMessage
	}
	return 0
}

func (x *ToBridgeMessage) GetExtra() []*FileInfo {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *ToBridgeMessage) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ToBridgeMessage) GetReply() *BridgeMessageReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ToBridgeMessage) GetReplyMap() map[string]string {
	if x != nil {
		return x.ReplyMap
	}
	return nil
}

func (x *ToBridgeMessage) GetConfig() *Bridge2Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// Пустое сообщение для ответов, не требующих данных
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_bridge_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{8}
}

type Bridge2Config_Bridge2ConfigsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*Bridge2Configs `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *Bridge2Config_Bridge2ConfigsList) Reset() {
	*x = Bridge2Config_Bridge2ConfigsList{}
	mi := &file_bridge_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bridge2Config_Bridge2ConfigsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bridge2Config_Bridge2ConfigsList) ProtoMessage() {}

func (x *Bridge2Config_Bridge2ConfigsList) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bridge2Config_Bridge2ConfigsList.ProtoReflect.Descriptor instead.
func (*Bridge2Config_Bridge2ConfigsList) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Bridge2Config_Bridge2ConfigsList) GetConfigs() []*Bridge2Configs {
	if x != nil {
		return x.Configs
	}
	return nil
}

var File_bridge_proto protoreflect.FileDescriptor

var file_bridge_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x72, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x72, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d,
	0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x3f, 0x0a,
	0x11, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c,
	0x03, 0x0a, 0x0d, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x2d, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x1a,
	0x46, 0x0a, 0x12, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x64, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x80, 0x01, 0x0a, 0x12, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x72, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x72,
	0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x02, 0x0a, 0x0e,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6f, 0x72, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x72, 0x70, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x67, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x02, 0x0a, 0x0c, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x73, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x67,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x67, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0xdf, 0x03, 0x0a, 0x0f, 0x54, 0x6f, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x2d,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x32, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3b, 0x0a,
	0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0x46, 0x0a, 0x0d, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x12, 0x5a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x3b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bridge_proto_rawDescOnce sync.Once
	file_bridge_proto_rawDescData = file_bridge_proto_rawDesc
)

func file_bridge_proto_rawDescGZIP() []byte {
	file_bridge_proto_rawDescOnce.Do(func() {
		file_bridge_proto_rawDescData = protoimpl.X.CompressGZIP(file_bridge_proto_rawDescData)
	})
	return file_bridge_proto_rawDescData
}

var file_bridge_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_bridge_proto_goTypes = []any{
	(*Bridge2Configs)(nil),                   // 0: bridge.Bridge2Configs
	(*Bridge2Config)(nil),                    // 1: bridge.Bridge2Config
	(*FileInfo)(nil),                         // 2: bridge.FileInfo
	(*BridgeMessageReply)(nil),               // 3: bridge.BridgeMessageReply
	(*BridgeConfigDs)(nil),                   // 4: bridge.BridgeConfigDs
	(*BridgeConfigTg)(nil),                   // 5: bridge.BridgeConfigTg
	(*BridgeConfig)(nil),                     // 6: bridge.BridgeConfig
	(*ToBridgeMessage)(nil),                  // 7: bridge.ToBridgeMessage
	(*Empty)(nil),                            // 8: bridge.Empty
	nil,                                      // 9: bridge.Bridge2Configs.MappingRolesEntry
	(*Bridge2Config_Bridge2ConfigsList)(nil), // 10: bridge.Bridge2Config.Bridge2ConfigsList
	nil,                                      // 11: bridge.Bridge2Config.ChannelEntry
	nil,                                      // 12: bridge.BridgeConfigDs.MappingRolesEntry
	nil,                                      // 13: bridge.BridgeConfigTg.MappingRolesEntry
	nil,                                      // 14: bridge.ToBridgeMessage.ReplyMapEntry
}
var file_bridge_proto_depIdxs = []int32{
	9,  // 0: bridge.Bridge2Configs.mapping_roles:type_name -> bridge.Bridge2Configs.MappingRolesEntry
	11, // 1: bridge.Bridge2Config.channel:type_name -> bridge.Bridge2Config.ChannelEntry
	12, // 2: bridge.BridgeConfigDs.mapping_roles:type_name -> bridge.BridgeConfigDs.MappingRolesEntry
	13, // 3: bridge.BridgeConfigTg.mapping_roles:type_name -> bridge.BridgeConfigTg.MappingRolesEntry
	4,  // 4: bridge.BridgeConfig.channel_ds:type_name -> bridge.BridgeConfigDs
	5,  // 5: bridge.BridgeConfig.channel_tg:type_name -> bridge.BridgeConfigTg
	2,  // 6: bridge.ToBridgeMessage.extra:type_name -> bridge.FileInfo
	3,  // 7: bridge.ToBridgeMessage.reply:type_name -> bridge.BridgeMessageReply
	14, // 8: bridge.ToBridgeMessage.reply_map:type_name -> bridge.ToBridgeMessage.ReplyMapEntry
	1,  // 9: bridge.ToBridgeMessage.config:type_name -> bridge.Bridge2Config
	0,  // 10: bridge.Bridge2Config.Bridge2ConfigsList.configs:type_name -> bridge.Bridge2Configs
	10, // 11: bridge.Bridge2Config.ChannelEntry.value:type_name -> bridge.Bridge2Config.Bridge2ConfigsList
	7,  // 12: bridge.BridgeService.InboxBridge:input_type -> bridge.ToBridgeMessage
	8,  // 13: bridge.BridgeService.InboxBridge:output_type -> bridge.Empty
	13, // [13:14] is the sub-list for method output_type
	12, // [12:13] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_bridge_proto_init() }
func file_bridge_proto_init() {
	if File_bridge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bridge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bridge_proto_goTypes,
		DependencyIndexes: file_bridge_proto_depIdxs,
		MessageInfos:      file_bridge_proto_msgTypes,
	}.Build()
	File_bridge_proto = out.File
	file_bridge_proto_rawDesc = nil
	file_bridge_proto_goTypes = nil
	file_bridge_proto_depIdxs = nil
}
