// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0--rc2
// source: discord.proto

package ds

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Url    string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Size   int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	FileID string `protobuf:"bytes,5,opt,name=fileID,proto3" json:"fileID,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_discord_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{0}
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

type CorpRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CorpRole) Reset() {
	*x = CorpRole{}
	mi := &file_discord_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorpRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorpRole) ProtoMessage() {}

func (x *CorpRole) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorpRole.ProtoReflect.Descriptor instead.
func (*CorpRole) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{1}
}

func (x *CorpRole) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CorpRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MembersRoles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid  string   `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	RolesId []string `protobuf:"bytes,2,rep,name=RolesId,proto3" json:"RolesId,omitempty"`
}

func (x *MembersRoles) Reset() {
	*x = MembersRoles{}
	mi := &file_discord_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MembersRoles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembersRoles) ProtoMessage() {}

func (x *MembersRoles) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembersRoles.ProtoReflect.Descriptor instead.
func (*MembersRoles) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{2}
}

func (x *MembersRoles) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *MembersRoles) GetRolesId() []string {
	if x != nil {
		return x.RolesId
	}
	return nil
}

type BridgeMessageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeMessage int64  `protobuf:"varint,1,opt,name=time_message,json=timeMessage,proto3" json:"time_message,omitempty"`
	Text        string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Avatar      string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	UserName    string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *BridgeMessageReply) Reset() {
	*x = BridgeMessageReply{}
	mi := &file_discord_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BridgeMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeMessageReply) ProtoMessage() {}

func (x *BridgeMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeMessageReply.ProtoReflect.Descriptor instead.
func (*BridgeMessageReply) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{3}
}

func (x *BridgeMessageReply) GetTimeMessage() int64 {
	if x != nil {
		return x.TimeMessage
	}
	return 0
}

func (x *BridgeMessageReply) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BridgeMessageReply) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *BridgeMessageReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type MessageIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ChatId    string `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *MessageIds) Reset() {
	*x = MessageIds{}
	mi := &file_discord_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageIds) ProtoMessage() {}

func (x *MessageIds) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageIds.ProtoReflect.Descriptor instead.
func (*MessageIds) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{4}
}

func (x *MessageIds) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageIds) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

type SendBridgeArrayMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string              `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Username  string              `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	ChannelID []string            `protobuf:"bytes,3,rep,name=channelID,proto3" json:"channelID,omitempty"`
	Extra     []*FileInfo         `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty"`
	Avatar    string              `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	ReplyMap  map[string]string   `protobuf:"bytes,6,rep,name=reply_map,json=replyMap,proto3" json:"reply_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Reply     *BridgeMessageReply `protobuf:"bytes,7,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *SendBridgeArrayMessagesRequest) Reset() {
	*x = SendBridgeArrayMessagesRequest{}
	mi := &file_discord_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendBridgeArrayMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBridgeArrayMessagesRequest) ProtoMessage() {}

func (x *SendBridgeArrayMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBridgeArrayMessagesRequest.ProtoReflect.Descriptor instead.
func (*SendBridgeArrayMessagesRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{5}
}

func (x *SendBridgeArrayMessagesRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendBridgeArrayMessagesRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SendBridgeArrayMessagesRequest) GetChannelID() []string {
	if x != nil {
		return x.ChannelID
	}
	return nil
}

func (x *SendBridgeArrayMessagesRequest) GetExtra() []*FileInfo {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *SendBridgeArrayMessagesRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *SendBridgeArrayMessagesRequest) GetReplyMap() map[string]string {
	if x != nil {
		return x.ReplyMap
	}
	return nil
}

func (x *SendBridgeArrayMessagesRequest) GetReply() *BridgeMessageReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type SendBridgeArrayMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIds []*MessageIds `protobuf:"bytes,1,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
}

func (x *SendBridgeArrayMessagesResponse) Reset() {
	*x = SendBridgeArrayMessagesResponse{}
	mi := &file_discord_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendBridgeArrayMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBridgeArrayMessagesResponse) ProtoMessage() {}

func (x *SendBridgeArrayMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBridgeArrayMessagesResponse.ProtoReflect.Descriptor instead.
func (*SendBridgeArrayMessagesResponse) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{6}
}

func (x *SendBridgeArrayMessagesResponse) GetMessageIds() []*MessageIds {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

type MembersRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memberroles []*MembersRoles `protobuf:"bytes,1,rep,name=memberroles,proto3" json:"memberroles,omitempty"`
}

func (x *MembersRolesResponse) Reset() {
	*x = MembersRolesResponse{}
	mi := &file_discord_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MembersRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembersRolesResponse) ProtoMessage() {}

func (x *MembersRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembersRolesResponse.ProtoReflect.Descriptor instead.
func (*MembersRolesResponse) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{7}
}

func (x *MembersRolesResponse) GetMemberroles() []*MembersRoles {
	if x != nil {
		return x.Memberroles
	}
	return nil
}

type SendPicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid     string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Text       string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ImageBytes []byte `protobuf:"bytes,3,opt,name=imageBytes,proto3" json:"imageBytes,omitempty"`
}

func (x *SendPicRequest) Reset() {
	*x = SendPicRequest{}
	mi := &file_discord_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendPicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPicRequest) ProtoMessage() {}

func (x *SendPicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPicRequest.ProtoReflect.Descriptor instead.
func (*SendPicRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{8}
}

func (x *SendPicRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *SendPicRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendPicRequest) GetImageBytes() []byte {
	if x != nil {
		return x.ImageBytes
	}
	return nil
}

type CleanChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Mesid  string `protobuf:"bytes,2,opt,name=mesid,proto3" json:"mesid,omitempty"`
	Text   string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *CleanChatRequest) Reset() {
	*x = CleanChatRequest{}
	mi := &file_discord_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanChatRequest) ProtoMessage() {}

func (x *CleanChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanChatRequest.ProtoReflect.Descriptor instead.
func (*CleanChatRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{9}
}

func (x *CleanChatRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *CleanChatRequest) GetMesid() string {
	if x != nil {
		return x.Mesid
	}
	return ""
}

func (x *CleanChatRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CleanOldMessageChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId string `protobuf:"bytes,1,opt,name=chatId,proto3" json:"chatId,omitempty"`
	Lim    string `protobuf:"bytes,2,opt,name=lim,proto3" json:"lim,omitempty"`
}

func (x *CleanOldMessageChannelRequest) Reset() {
	*x = CleanOldMessageChannelRequest{}
	mi := &file_discord_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanOldMessageChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanOldMessageChannelRequest) ProtoMessage() {}

func (x *CleanOldMessageChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanOldMessageChannelRequest.ProtoReflect.Descriptor instead.
func (*CleanOldMessageChannelRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{10}
}

func (x *CleanOldMessageChannelRequest) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *CleanOldMessageChannelRequest) GetLim() string {
	if x != nil {
		return x.Lim
	}
	return ""
}

type CheckAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nameid string `protobuf:"bytes,1,opt,name=nameid,proto3" json:"nameid,omitempty"`
	Chatid string `protobuf:"bytes,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
}

func (x *CheckAdminRequest) Reset() {
	*x = CheckAdminRequest{}
	mi := &file_discord_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAdminRequest) ProtoMessage() {}

func (x *CheckAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAdminRequest.ProtoReflect.Descriptor instead.
func (*CheckAdminRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{11}
}

func (x *CheckAdminRequest) GetNameid() string {
	if x != nil {
		return x.Nameid
	}
	return ""
}

func (x *CheckAdminRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

type CheckRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guild    string `protobuf:"bytes,1,opt,name=guild,proto3" json:"guild,omitempty"`
	Memberid string `protobuf:"bytes,2,opt,name=memberid,proto3" json:"memberid,omitempty"`
	Roleid   string `protobuf:"bytes,3,opt,name=roleid,proto3" json:"roleid,omitempty"`
}

func (x *CheckRoleRequest) Reset() {
	*x = CheckRoleRequest{}
	mi := &file_discord_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRoleRequest) ProtoMessage() {}

func (x *CheckRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRoleRequest.ProtoReflect.Descriptor instead.
func (*CheckRoleRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{12}
}

func (x *CheckRoleRequest) GetGuild() string {
	if x != nil {
		return x.Guild
	}
	return ""
}

func (x *CheckRoleRequest) GetMemberid() string {
	if x != nil {
		return x.Memberid
	}
	return ""
}

func (x *CheckRoleRequest) GetRoleid() string {
	if x != nil {
		return x.Roleid
	}
	return ""
}

type FlagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag bool `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *FlagResponse) Reset() {
	*x = FlagResponse{}
	mi := &file_discord_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagResponse) ProtoMessage() {}

func (x *FlagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagResponse.ProtoReflect.Descriptor instead.
func (*FlagResponse) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{13}
}

func (x *FlagResponse) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type ChannelTypingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
}

func (x *ChannelTypingRequest) Reset() {
	*x = ChannelTypingRequest{}
	mi := &file_discord_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelTypingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTypingRequest) ProtoMessage() {}

func (x *ChannelTypingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTypingRequest.ProtoReflect.Descriptor instead.
func (*ChannelTypingRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{14}
}

func (x *ChannelTypingRequest) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

type DeleteMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Mesid  string `protobuf:"bytes,2,opt,name=mesid,proto3" json:"mesid,omitempty"`
}

func (x *DeleteMessageRequest) Reset() {
	*x = DeleteMessageRequest{}
	mi := &file_discord_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageRequest) ProtoMessage() {}

func (x *DeleteMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageRequest.ProtoReflect.Descriptor instead.
func (*DeleteMessageRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteMessageRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *DeleteMessageRequest) GetMesid() string {
	if x != nil {
		return x.Mesid
	}
	return ""
}

type GetAvatarUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (x *GetAvatarUrlRequest) Reset() {
	*x = GetAvatarUrlRequest{}
	mi := &file_discord_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvatarUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvatarUrlRequest) ProtoMessage() {}

func (x *GetAvatarUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvatarUrlRequest.ProtoReflect.Descriptor instead.
func (*GetAvatarUrlRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{16}
}

func (x *GetAvatarUrlRequest) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

type DeleteMessageSecondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Mesid  string `protobuf:"bytes,2,opt,name=mesid,proto3" json:"mesid,omitempty"`
	Second int32  `protobuf:"varint,3,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *DeleteMessageSecondRequest) Reset() {
	*x = DeleteMessageSecondRequest{}
	mi := &file_discord_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageSecondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageSecondRequest) ProtoMessage() {}

func (x *DeleteMessageSecondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageSecondRequest.ProtoReflect.Descriptor instead.
func (*DeleteMessageSecondRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteMessageSecondRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *DeleteMessageSecondRequest) GetMesid() string {
	if x != nil {
		return x.Mesid
	}
	return ""
}

func (x *DeleteMessageSecondRequest) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type EditComplexButtonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dsmesid  string            `protobuf:"bytes,1,opt,name=dsmesid,proto3" json:"dsmesid,omitempty"`
	Dschatid string            `protobuf:"bytes,2,opt,name=dschatid,proto3" json:"dschatid,omitempty"`
	MapEmbed map[string]string `protobuf:"bytes,3,rep,name=mapEmbed,proto3" json:"mapEmbed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EditComplexButtonRequest) Reset() {
	*x = EditComplexButtonRequest{}
	mi := &file_discord_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditComplexButtonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditComplexButtonRequest) ProtoMessage() {}

func (x *EditComplexButtonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditComplexButtonRequest.ProtoReflect.Descriptor instead.
func (*EditComplexButtonRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{18}
}

func (x *EditComplexButtonRequest) GetDsmesid() string {
	if x != nil {
		return x.Dsmesid
	}
	return ""
}

func (x *EditComplexButtonRequest) GetDschatid() string {
	if x != nil {
		return x.Dschatid
	}
	return ""
}

func (x *EditComplexButtonRequest) GetMapEmbed() map[string]string {
	if x != nil {
		return x.MapEmbed
	}
	return nil
}

type EditWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Username  string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	ChatID    string `protobuf:"bytes,3,opt,name=chatID,proto3" json:"chatID,omitempty"`
	MID       string `protobuf:"bytes,4,opt,name=mID,proto3" json:"mID,omitempty"`
	AvatarURL string `protobuf:"bytes,5,opt,name=avatarURL,proto3" json:"avatarURL,omitempty"`
}

func (x *EditWebhookRequest) Reset() {
	*x = EditWebhookRequest{}
	mi := &file_discord_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditWebhookRequest) ProtoMessage() {}

func (x *EditWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditWebhookRequest.ProtoReflect.Descriptor instead.
func (*EditWebhookRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{19}
}

func (x *EditWebhookRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *EditWebhookRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EditWebhookRequest) GetChatID() string {
	if x != nil {
		return x.ChatID
	}
	return ""
}

func (x *EditWebhookRequest) GetMID() string {
	if x != nil {
		return x.MID
	}
	return ""
}

func (x *EditWebhookRequest) GetAvatarURL() string {
	if x != nil {
		return x.AvatarURL
	}
	return ""
}

type EditMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ChatID  string `protobuf:"bytes,2,opt,name=chatID,proto3" json:"chatID,omitempty"`
	MID     string `protobuf:"bytes,3,opt,name=mID,proto3" json:"mID,omitempty"`
}

func (x *EditMessageRequest) Reset() {
	*x = EditMessageRequest{}
	mi := &file_discord_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMessageRequest) ProtoMessage() {}

func (x *EditMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMessageRequest.ProtoReflect.Descriptor instead.
func (*EditMessageRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{20}
}

func (x *EditMessageRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *EditMessageRequest) GetChatID() string {
	if x != nil {
		return x.ChatID
	}
	return ""
}

func (x *EditMessageRequest) GetMID() string {
	if x != nil {
		return x.MID
	}
	return ""
}

type GuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guild string `protobuf:"bytes,1,opt,name=guild,proto3" json:"guild,omitempty"`
}

func (x *GuildRequest) Reset() {
	*x = GuildRequest{}
	mi := &file_discord_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRequest) ProtoMessage() {}

func (x *GuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRequest.ProtoReflect.Descriptor instead.
func (*GuildRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{21}
}

func (x *GuildRequest) GetGuild() string {
	if x != nil {
		return x.Guild
	}
	return ""
}

type GetRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles []*CorpRole `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *GetRolesResponse) Reset() {
	*x = GetRolesResponse{}
	mi := &file_discord_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRolesResponse) ProtoMessage() {}

func (x *GetRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRolesResponse.ProtoReflect.Descriptor instead.
func (*GetRolesResponse) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{22}
}

func (x *GetRolesResponse) GetRoles() []*CorpRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

type QueueSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *QueueSendRequest) Reset() {
	*x = QueueSendRequest{}
	mi := &file_discord_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueSendRequest) ProtoMessage() {}

func (x *QueueSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueSendRequest.ProtoReflect.Descriptor instead.
func (*QueueSendRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{23}
}

func (x *QueueSendRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ReplaceTextMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text    string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Guildid string `protobuf:"bytes,2,opt,name=guildid,proto3" json:"guildid,omitempty"`
}

func (x *ReplaceTextMessageRequest) Reset() {
	*x = ReplaceTextMessageRequest{}
	mi := &file_discord_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceTextMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceTextMessageRequest) ProtoMessage() {}

func (x *ReplaceTextMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceTextMessageRequest.ProtoReflect.Descriptor instead.
func (*ReplaceTextMessageRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{24}
}

func (x *ReplaceTextMessageRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ReplaceTextMessageRequest) GetGuildid() string {
	if x != nil {
		return x.Guildid
	}
	return ""
}

type RoleToIdPingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RolePing string `protobuf:"bytes,1,opt,name=rolePing,proto3" json:"rolePing,omitempty"`
	Guildid  string `protobuf:"bytes,2,opt,name=guildid,proto3" json:"guildid,omitempty"`
}

func (x *RoleToIdPingRequest) Reset() {
	*x = RoleToIdPingRequest{}
	mi := &file_discord_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleToIdPingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleToIdPingRequest) ProtoMessage() {}

func (x *RoleToIdPingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleToIdPingRequest.ProtoReflect.Descriptor instead.
func (*RoleToIdPingRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{25}
}

func (x *RoleToIdPingRequest) GetRolePing() string {
	if x != nil {
		return x.RolePing
	}
	return ""
}

func (x *RoleToIdPingRequest) GetGuildid() string {
	if x != nil {
		return x.Guildid
	}
	return ""
}

type SendDmTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	AuthorID string `protobuf:"bytes,2,opt,name=AuthorID,proto3" json:"AuthorID,omitempty"`
}

func (x *SendDmTextRequest) Reset() {
	*x = SendDmTextRequest{}
	mi := &file_discord_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendDmTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDmTextRequest) ProtoMessage() {}

func (x *SendDmTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDmTextRequest.ProtoReflect.Descriptor instead.
func (*SendDmTextRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{26}
}

func (x *SendDmTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendDmTextRequest) GetAuthorID() string {
	if x != nil {
		return x.AuthorID
	}
	return ""
}

type SendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SendRequest) Reset() {
	*x = SendRequest{}
	mi := &file_discord_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRequest) ProtoMessage() {}

func (x *SendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRequest.ProtoReflect.Descriptor instead.
func (*SendRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{27}
}

func (x *SendRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *SendRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type SendChannelDelSecondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Second int32  `protobuf:"varint,3,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *SendChannelDelSecondRequest) Reset() {
	*x = SendChannelDelSecondRequest{}
	mi := &file_discord_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendChannelDelSecondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChannelDelSecondRequest) ProtoMessage() {}

func (x *SendChannelDelSecondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChannelDelSecondRequest.ProtoReflect.Descriptor instead.
func (*SendChannelDelSecondRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{28}
}

func (x *SendChannelDelSecondRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *SendChannelDelSecondRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendChannelDelSecondRequest) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type SendEmbedTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SendEmbedTimeRequest) Reset() {
	*x = SendEmbedTimeRequest{}
	mi := &file_discord_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEmbedTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEmbedTimeRequest) ProtoMessage() {}

func (x *SendEmbedTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEmbedTimeRequest.ProtoReflect.Descriptor instead.
func (*SendEmbedTimeRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{29}
}

func (x *SendEmbedTimeRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *SendEmbedTimeRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type SendComplexContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SendComplexContentRequest) Reset() {
	*x = SendComplexContentRequest{}
	mi := &file_discord_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendComplexContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendComplexContentRequest) ProtoMessage() {}

func (x *SendComplexContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendComplexContentRequest.ProtoReflect.Descriptor instead.
func (*SendComplexContentRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{30}
}

func (x *SendComplexContentRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *SendComplexContentRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type SendComplexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid    string            `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	MapEmbeds map[string]string `protobuf:"bytes,2,rep,name=mapEmbeds,proto3" json:"mapEmbeds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SendComplexRequest) Reset() {
	*x = SendComplexRequest{}
	mi := &file_discord_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendComplexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendComplexRequest) ProtoMessage() {}

func (x *SendComplexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendComplexRequest.ProtoReflect.Descriptor instead.
func (*SendComplexRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{31}
}

func (x *SendComplexRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *SendComplexRequest) GetMapEmbeds() map[string]string {
	if x != nil {
		return x.MapEmbeds
	}
	return nil
}

type SendEmbedTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Text   string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SendEmbedTextRequest) Reset() {
	*x = SendEmbedTextRequest{}
	mi := &file_discord_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEmbedTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEmbedTextRequest) ProtoMessage() {}

func (x *SendEmbedTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEmbedTextRequest.ProtoReflect.Descriptor instead.
func (*SendEmbedTextRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{32}
}

func (x *SendEmbedTextRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *SendEmbedTextRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SendEmbedTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type SendEmbedImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid   string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Imageurl string `protobuf:"bytes,3,opt,name=imageurl,proto3" json:"imageurl,omitempty"`
}

func (x *SendEmbedImageRequest) Reset() {
	*x = SendEmbedImageRequest{}
	mi := &file_discord_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEmbedImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEmbedImageRequest) ProtoMessage() {}

func (x *SendEmbedImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEmbedImageRequest.ProtoReflect.Descriptor instead.
func (*SendEmbedImageRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{33}
}

func (x *SendEmbedImageRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *SendEmbedImageRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SendEmbedImageRequest) GetImageurl() string {
	if x != nil {
		return x.Imageurl
	}
	return ""
}

type SendEmbedImageFileNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId             string `protobuf:"bytes,1,opt,name=chatId,proto3" json:"chatId,omitempty"`
	Title              string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	FileNameScoreboard string `protobuf:"bytes,3,opt,name=fileNameScoreboard,proto3" json:"fileNameScoreboard,omitempty"`
}

func (x *SendEmbedImageFileNameRequest) Reset() {
	*x = SendEmbedImageFileNameRequest{}
	mi := &file_discord_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEmbedImageFileNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEmbedImageFileNameRequest) ProtoMessage() {}

func (x *SendEmbedImageFileNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEmbedImageFileNameRequest.ProtoReflect.Descriptor instead.
func (*SendEmbedImageFileNameRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{34}
}

func (x *SendEmbedImageFileNameRequest) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *SendEmbedImageFileNameRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SendEmbedImageFileNameRequest) GetFileNameScoreboard() string {
	if x != nil {
		return x.FileNameScoreboard
	}
	return ""
}

type SendHelpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid      string `protobuf:"bytes,1,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	OldMidHelps string `protobuf:"bytes,4,opt,name=oldMidHelps,proto3" json:"oldMidHelps,omitempty"`
	IfUser      bool   `protobuf:"varint,5,opt,name=ifUser,proto3" json:"ifUser,omitempty"`
}

func (x *SendHelpRequest) Reset() {
	*x = SendHelpRequest{}
	mi := &file_discord_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendHelpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendHelpRequest) ProtoMessage() {}

func (x *SendHelpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendHelpRequest.ProtoReflect.Descriptor instead.
func (*SendHelpRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{35}
}

func (x *SendHelpRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *SendHelpRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SendHelpRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SendHelpRequest) GetOldMidHelps() string {
	if x != nil {
		return x.OldMidHelps
	}
	return ""
}

func (x *SendHelpRequest) GetIfUser() bool {
	if x != nil {
		return x.IfUser
	}
	return false
}

type SendPollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Options []string          `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *SendPollRequest) Reset() {
	*x = SendPollRequest{}
	mi := &file_discord_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendPollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPollRequest) ProtoMessage() {}

func (x *SendPollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPollRequest.ProtoReflect.Descriptor instead.
func (*SendPollRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{36}
}

func (x *SendPollRequest) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendPollRequest) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type SendWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Chatid   string `protobuf:"bytes,3,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Avatar   string `protobuf:"bytes,4,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (x *SendWebhookRequest) Reset() {
	*x = SendWebhookRequest{}
	mi := &file_discord_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendWebhookRequest) ProtoMessage() {}

func (x *SendWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendWebhookRequest.ProtoReflect.Descriptor instead.
func (*SendWebhookRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{37}
}

func (x *SendWebhookRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SendWebhookRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SendWebhookRequest) GetChatid() string {
	if x != nil {
		return x.Chatid
	}
	return ""
}

func (x *SendWebhookRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type SubscrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nameid   string `protobuf:"bytes,1,opt,name=nameid,proto3" json:"nameid,omitempty"`
	ArgRoles string `protobuf:"bytes,2,opt,name=argRoles,proto3" json:"argRoles,omitempty"`
	Guildid  string `protobuf:"bytes,3,opt,name=guildid,proto3" json:"guildid,omitempty"`
}

func (x *SubscrRequest) Reset() {
	*x = SubscrRequest{}
	mi := &file_discord_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscrRequest) ProtoMessage() {}

func (x *SubscrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscrRequest.ProtoReflect.Descriptor instead.
func (*SubscrRequest) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{38}
}

func (x *SubscrRequest) GetNameid() string {
	if x != nil {
		return x.Nameid
	}
	return ""
}

func (x *SubscrRequest) GetArgRoles() string {
	if x != nil {
		return x.ArgRoles
	}
	return ""
}

func (x *SubscrRequest) GetGuildid() string {
	if x != nil {
		return x.Guildid
	}
	return ""
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_discord_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{39}
}

func (x *ErrorResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type TextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextResponse) Reset() {
	*x = TextResponse{}
	mi := &file_discord_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextResponse) ProtoMessage() {}

func (x *TextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextResponse.ProtoReflect.Descriptor instead.
func (*TextResponse) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{40}
}

func (x *TextResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type NewsTranslateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	En string `protobuf:"bytes,1,opt,name=en,proto3" json:"en,omitempty"`
	Ru string `protobuf:"bytes,2,opt,name=ru,proto3" json:"ru,omitempty"`
	Ua string `protobuf:"bytes,3,opt,name=ua,proto3" json:"ua,omitempty"`
}

func (x *NewsTranslateResponse) Reset() {
	*x = NewsTranslateResponse{}
	mi := &file_discord_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsTranslateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsTranslateResponse) ProtoMessage() {}

func (x *NewsTranslateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsTranslateResponse.ProtoReflect.Descriptor instead.
func (*NewsTranslateResponse) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{41}
}

func (x *NewsTranslateResponse) GetEn() string {
	if x != nil {
		return x.En
	}
	return ""
}

func (x *NewsTranslateResponse) GetRu() string {
	if x != nil {
		return x.Ru
	}
	return ""
}

func (x *NewsTranslateResponse) GetUa() string {
	if x != nil {
		return x.Ua
	}
	return ""
}

type IntResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *IntResponse) Reset() {
	*x = IntResponse{}
	mi := &file_discord_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntResponse) ProtoMessage() {}

func (x *IntResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntResponse.ProtoReflect.Descriptor instead.
func (*IntResponse) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{42}
}

func (x *IntResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_discord_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{43}
}

var File_discord_proto protoreflect.FileDescriptor

var file_discord_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x64, 0x73, 0x22, 0x70, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x08, 0x43, 0x6f, 0x72, 0x70, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x12, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0xe4,
	0x02, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x4d, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x73, 0x2e, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x1f, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x52, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x14, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x65, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x65, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x49, 0x0a, 0x1d, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x4f, 0x6c, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6c, 0x69, 0x6d, 0x22, 0x43, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x10, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6c, 0x65, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x0c, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x34, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x22, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x65, 0x73, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x65, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x73,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x18, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x6d, 0x65, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x6d, 0x65, 0x73, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x73, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x73, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x46, 0x0a,
	0x08, 0x6d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61,
	0x70, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x52, 0x4c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x52,
	0x4c, 0x22, 0x58, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x49, 0x44, 0x22, 0x24, 0x0a, 0x0c, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x22, 0x36, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x70, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x49, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x13,
	0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x11, 0x53, 0x65, 0x6e,
	0x64, 0x44, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x39,
	0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x61, 0x0a, 0x1b, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x42, 0x0a, 0x14,
	0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x47, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x73,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x1a, 0x3c, 0x0a,
	0x0e, 0x4d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x14, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x61, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x75, 0x72, 0x6c, 0x22, 0x7d, 0x0a, 0x1d, 0x53, 0x65, 0x6e, 0x64,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64,
	0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x6c, 0x64, 0x4d, 0x69, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x4d, 0x69, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x66, 0x55, 0x73, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x74, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x5d, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x72, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x47,
	0x0a, 0x15, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x75, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x75, 0x61, 0x22, 0x25, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x07,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xdb, 0x0f, 0x0a, 0x0a, 0x42, 0x6f, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x14, 0x2e, 0x64, 0x73, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x64, 0x73, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x16, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x73, 0x42,
	0x6f, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x09,
	0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x64, 0x73, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x16, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x6c, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21,
	0x2e, 0x64, 0x73, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x6c, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x09, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0a,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x15, 0x2e, 0x64, 0x73, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x14, 0x2e, 0x64, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x64, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x2e, 0x64, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x64, 0x73, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1e, 0x2e, 0x64, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x64, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x64, 0x73,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x64, 0x73, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b,
	0x45, 0x64, 0x69, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x16, 0x2e, 0x64, 0x73,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30,
	0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e,
	0x64, 0x73, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x17, 0x2e, 0x64, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x64, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x2e, 0x64, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x09, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x12,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x09, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x19, 0x2e, 0x64, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c,
	0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x2e, 0x64,
	0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x44,
	0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x15, 0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x44,
	0x6d, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x64,
	0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x0f, 0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x2e,
	0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1f,
	0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x65, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x09, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0d, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x73,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e,
	0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64,
	0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x16, 0x2e,
	0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x6c, 0x70,
	0x12, 0x13, 0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x4f,
	0x72, 0x45, 0x64, 0x69, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x64, 0x73, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x1c, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x45, 0x64, 0x69, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e,
	0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x12,
	0x13, 0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x69,
	0x63, 0x12, 0x12, 0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x16, 0x2e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x64, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x11,
	0x2e, 0x64, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x64, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x11, 0x2e, 0x64, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x64, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1a, 0x5a, 0x18, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_discord_proto_rawDescOnce sync.Once
	file_discord_proto_rawDescData = file_discord_proto_rawDesc
)

func file_discord_proto_rawDescGZIP() []byte {
	file_discord_proto_rawDescOnce.Do(func() {
		file_discord_proto_rawDescData = protoimpl.X.CompressGZIP(file_discord_proto_rawDescData)
	})
	return file_discord_proto_rawDescData
}

var file_discord_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_discord_proto_goTypes = []any{
	(*FileInfo)(nil),                        // 0: ds.FileInfo
	(*CorpRole)(nil),                        // 1: ds.CorpRole
	(*MembersRoles)(nil),                    // 2: ds.MembersRoles
	(*BridgeMessageReply)(nil),              // 3: ds.BridgeMessageReply
	(*MessageIds)(nil),                      // 4: ds.MessageIds
	(*SendBridgeArrayMessagesRequest)(nil),  // 5: ds.SendBridgeArrayMessagesRequest
	(*SendBridgeArrayMessagesResponse)(nil), // 6: ds.SendBridgeArrayMessagesResponse
	(*MembersRolesResponse)(nil),            // 7: ds.MembersRolesResponse
	(*SendPicRequest)(nil),                  // 8: ds.SendPicRequest
	(*CleanChatRequest)(nil),                // 9: ds.CleanChatRequest
	(*CleanOldMessageChannelRequest)(nil),   // 10: ds.CleanOldMessageChannelRequest
	(*CheckAdminRequest)(nil),               // 11: ds.CheckAdminRequest
	(*CheckRoleRequest)(nil),                // 12: ds.CheckRoleRequest
	(*FlagResponse)(nil),                    // 13: ds.FlagResponse
	(*ChannelTypingRequest)(nil),            // 14: ds.ChannelTypingRequest
	(*DeleteMessageRequest)(nil),            // 15: ds.DeleteMessageRequest
	(*GetAvatarUrlRequest)(nil),             // 16: ds.GetAvatarUrlRequest
	(*DeleteMessageSecondRequest)(nil),      // 17: ds.DeleteMessageSecondRequest
	(*EditComplexButtonRequest)(nil),        // 18: ds.EditComplexButtonRequest
	(*EditWebhookRequest)(nil),              // 19: ds.EditWebhookRequest
	(*EditMessageRequest)(nil),              // 20: ds.EditMessageRequest
	(*GuildRequest)(nil),                    // 21: ds.GuildRequest
	(*GetRolesResponse)(nil),                // 22: ds.GetRolesResponse
	(*QueueSendRequest)(nil),                // 23: ds.QueueSendRequest
	(*ReplaceTextMessageRequest)(nil),       // 24: ds.ReplaceTextMessageRequest
	(*RoleToIdPingRequest)(nil),             // 25: ds.RoleToIdPingRequest
	(*SendDmTextRequest)(nil),               // 26: ds.SendDmTextRequest
	(*SendRequest)(nil),                     // 27: ds.SendRequest
	(*SendChannelDelSecondRequest)(nil),     // 28: ds.SendChannelDelSecondRequest
	(*SendEmbedTimeRequest)(nil),            // 29: ds.SendEmbedTimeRequest
	(*SendComplexContentRequest)(nil),       // 30: ds.SendComplexContentRequest
	(*SendComplexRequest)(nil),              // 31: ds.SendComplexRequest
	(*SendEmbedTextRequest)(nil),            // 32: ds.SendEmbedTextRequest
	(*SendEmbedImageRequest)(nil),           // 33: ds.SendEmbedImageRequest
	(*SendEmbedImageFileNameRequest)(nil),   // 34: ds.SendEmbedImageFileNameRequest
	(*SendHelpRequest)(nil),                 // 35: ds.SendHelpRequest
	(*SendPollRequest)(nil),                 // 36: ds.SendPollRequest
	(*SendWebhookRequest)(nil),              // 37: ds.SendWebhookRequest
	(*SubscrRequest)(nil),                   // 38: ds.SubscrRequest
	(*ErrorResponse)(nil),                   // 39: ds.ErrorResponse
	(*TextResponse)(nil),                    // 40: ds.TextResponse
	(*NewsTranslateResponse)(nil),           // 41: ds.NewsTranslateResponse
	(*IntResponse)(nil),                     // 42: ds.IntResponse
	(*Empty)(nil),                           // 43: ds.Empty
	nil,                                     // 44: ds.SendBridgeArrayMessagesRequest.ReplyMapEntry
	nil,                                     // 45: ds.EditComplexButtonRequest.MapEmbedEntry
	nil,                                     // 46: ds.SendComplexRequest.MapEmbedsEntry
	nil,                                     // 47: ds.SendPollRequest.DataEntry
}
var file_discord_proto_depIdxs = []int32{
	0,  // 0: ds.SendBridgeArrayMessagesRequest.extra:type_name -> ds.FileInfo
	44, // 1: ds.SendBridgeArrayMessagesRequest.reply_map:type_name -> ds.SendBridgeArrayMessagesRequest.ReplyMapEntry
	3,  // 2: ds.SendBridgeArrayMessagesRequest.reply:type_name -> ds.BridgeMessageReply
	4,  // 3: ds.SendBridgeArrayMessagesResponse.message_ids:type_name -> ds.MessageIds
	2,  // 4: ds.MembersRolesResponse.memberroles:type_name -> ds.MembersRoles
	45, // 5: ds.EditComplexButtonRequest.mapEmbed:type_name -> ds.EditComplexButtonRequest.MapEmbedEntry
	1,  // 6: ds.GetRolesResponse.roles:type_name -> ds.CorpRole
	46, // 7: ds.SendComplexRequest.mapEmbeds:type_name -> ds.SendComplexRequest.MapEmbedsEntry
	47, // 8: ds.SendPollRequest.data:type_name -> ds.SendPollRequest.DataEntry
	9,  // 9: ds.BotService.CleanChat:input_type -> ds.CleanChatRequest
	43, // 10: ds.BotService.CleanRsBotOtherMessage:input_type -> ds.Empty
	10, // 11: ds.BotService.CleanOldMessageChannel:input_type -> ds.CleanOldMessageChannelRequest
	11, // 12: ds.BotService.CheckAdmin:input_type -> ds.CheckAdminRequest
	12, // 13: ds.BotService.CheckRole:input_type -> ds.CheckRoleRequest
	14, // 14: ds.BotService.ChannelTyping:input_type -> ds.ChannelTypingRequest
	15, // 15: ds.BotService.DeleteMessage:input_type -> ds.DeleteMessageRequest
	17, // 16: ds.BotService.DeleteMessageSecond:input_type -> ds.DeleteMessageSecondRequest
	18, // 17: ds.BotService.EditComplexButton:input_type -> ds.EditComplexButtonRequest
	19, // 18: ds.BotService.EditWebhook:input_type -> ds.EditWebhookRequest
	20, // 19: ds.BotService.EditMessage:input_type -> ds.EditMessageRequest
	16, // 20: ds.BotService.GetAvatarUrl:input_type -> ds.GetAvatarUrlRequest
	21, // 21: ds.BotService.GetRoles:input_type -> ds.GuildRequest
	21, // 22: ds.BotService.GetMembersRoles:input_type -> ds.GuildRequest
	23, // 23: ds.BotService.QueueSend:input_type -> ds.QueueSendRequest
	24, // 24: ds.BotService.ReplaceTextMessage:input_type -> ds.ReplaceTextMessageRequest
	43, // 25: ds.BotService.ReadNewsMessage:input_type -> ds.Empty
	25, // 26: ds.BotService.RoleToIdPing:input_type -> ds.RoleToIdPingRequest
	26, // 27: ds.BotService.SendDmText:input_type -> ds.SendDmTextRequest
	27, // 28: ds.BotService.Send:input_type -> ds.SendRequest
	5,  // 29: ds.BotService.SendBridgeArrayMessages:input_type -> ds.SendBridgeArrayMessagesRequest
	28, // 30: ds.BotService.SendChannelDelSecond:input_type -> ds.SendChannelDelSecondRequest
	29, // 31: ds.BotService.SendEmbedTime:input_type -> ds.SendEmbedTimeRequest
	30, // 32: ds.BotService.SendComplexContent:input_type -> ds.SendComplexContentRequest
	31, // 33: ds.BotService.SendComplex:input_type -> ds.SendComplexRequest
	32, // 34: ds.BotService.SendEmbedText:input_type -> ds.SendEmbedTextRequest
	35, // 35: ds.BotService.SendHelp:input_type -> ds.SendHelpRequest
	33, // 36: ds.BotService.SendOrEditEmbedImage:input_type -> ds.SendEmbedImageRequest
	34, // 37: ds.BotService.SendOrEditEmbedImageFileName:input_type -> ds.SendEmbedImageFileNameRequest
	36, // 38: ds.BotService.SendPoll:input_type -> ds.SendPollRequest
	8,  // 39: ds.BotService.SendPic:input_type -> ds.SendPicRequest
	37, // 40: ds.BotService.SendWebhook:input_type -> ds.SendWebhookRequest
	38, // 41: ds.BotService.Subscribe:input_type -> ds.SubscrRequest
	38, // 42: ds.BotService.Unsubscribe:input_type -> ds.SubscrRequest
	43, // 43: ds.BotService.CleanChat:output_type -> ds.Empty
	43, // 44: ds.BotService.CleanRsBotOtherMessage:output_type -> ds.Empty
	43, // 45: ds.BotService.CleanOldMessageChannel:output_type -> ds.Empty
	13, // 46: ds.BotService.CheckAdmin:output_type -> ds.FlagResponse
	13, // 47: ds.BotService.CheckRole:output_type -> ds.FlagResponse
	43, // 48: ds.BotService.ChannelTyping:output_type -> ds.Empty
	43, // 49: ds.BotService.DeleteMessage:output_type -> ds.Empty
	43, // 50: ds.BotService.DeleteMessageSecond:output_type -> ds.Empty
	39, // 51: ds.BotService.EditComplexButton:output_type -> ds.ErrorResponse
	43, // 52: ds.BotService.EditWebhook:output_type -> ds.Empty
	43, // 53: ds.BotService.EditMessage:output_type -> ds.Empty
	40, // 54: ds.BotService.GetAvatarUrl:output_type -> ds.TextResponse
	22, // 55: ds.BotService.GetRoles:output_type -> ds.GetRolesResponse
	7,  // 56: ds.BotService.GetMembersRoles:output_type -> ds.MembersRolesResponse
	43, // 57: ds.BotService.QueueSend:output_type -> ds.Empty
	40, // 58: ds.BotService.ReplaceTextMessage:output_type -> ds.TextResponse
	41, // 59: ds.BotService.ReadNewsMessage:output_type -> ds.NewsTranslateResponse
	40, // 60: ds.BotService.RoleToIdPing:output_type -> ds.TextResponse
	43, // 61: ds.BotService.SendDmText:output_type -> ds.Empty
	40, // 62: ds.BotService.Send:output_type -> ds.TextResponse
	6,  // 63: ds.BotService.SendBridgeArrayMessages:output_type -> ds.SendBridgeArrayMessagesResponse
	43, // 64: ds.BotService.SendChannelDelSecond:output_type -> ds.Empty
	40, // 65: ds.BotService.SendEmbedTime:output_type -> ds.TextResponse
	40, // 66: ds.BotService.SendComplexContent:output_type -> ds.TextResponse
	40, // 67: ds.BotService.SendComplex:output_type -> ds.TextResponse
	40, // 68: ds.BotService.SendEmbedText:output_type -> ds.TextResponse
	40, // 69: ds.BotService.SendHelp:output_type -> ds.TextResponse
	39, // 70: ds.BotService.SendOrEditEmbedImage:output_type -> ds.ErrorResponse
	39, // 71: ds.BotService.SendOrEditEmbedImageFileName:output_type -> ds.ErrorResponse
	40, // 72: ds.BotService.SendPoll:output_type -> ds.TextResponse
	39, // 73: ds.BotService.SendPic:output_type -> ds.ErrorResponse
	40, // 74: ds.BotService.SendWebhook:output_type -> ds.TextResponse
	42, // 75: ds.BotService.Subscribe:output_type -> ds.IntResponse
	42, // 76: ds.BotService.Unsubscribe:output_type -> ds.IntResponse
	43, // [43:77] is the sub-list for method output_type
	9,  // [9:43] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_discord_proto_init() }
func file_discord_proto_init() {
	if File_discord_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_discord_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_discord_proto_goTypes,
		DependencyIndexes: file_discord_proto_depIdxs,
		MessageInfos:      file_discord_proto_msgTypes,
	}.Build()
	File_discord_proto = out.File
	file_discord_proto_rawDesc = nil
	file_discord_proto_goTypes = nil
	file_discord_proto_depIdxs = nil
}
