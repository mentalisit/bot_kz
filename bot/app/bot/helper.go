package bot

import (
	"fmt"
	"kz_bot/models"
	"sort"
	"strconv"
	"strings"
	"time"
)

const (
	emOK      = "‚úÖ"
	emCancel  = "‚ùé"
	emRsStart = "üöÄ"
	emPl30    = "‚åõ"
	emPlus    = "‚ûï"
	emMinus   = "‚ûñ"
)

func percent(lvl int) int {
	p := 22
	for i := 2; i < lvl; i++ {
		p += 2
	}
	return p
}

func formatTime(ut int64) string {
	// –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
	targetDate := time.Unix(ut, 0)

	// –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
	remainingTime := targetDate.Sub(time.Now().UTC())

	text := ""

	// –ü–æ–ª—É—á–∏—Ç–µ –¥–Ω–∏, —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –∏–∑ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
	days := remainingTime / (24 * time.Hour)
	if days > 0 {
		text += fmt.Sprintf("%d–¥ ", days)
	}
	remainingTime = remainingTime % (24 * time.Hour)
	hours := remainingTime / time.Hour
	if hours > 0 {
		text += fmt.Sprintf("%d—á ", hours)
	}
	remainingTime = remainingTime % time.Hour
	minutes := remainingTime / time.Minute
	if days == 0 && minutes > 0 {
		text += fmt.Sprintf("%d–º", minutes)
	}
	return text
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ä–µ–∑–∞ —Å—Ç—Ä–æ–∫ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤
func sortByFirstTwoDigits(input []string) []string {
	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è —Å—Ä–µ–∑–∞ —Å—Ç—Ä–æ–∫
	type sortableStrings []string

	// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ sort.Interface –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏–ø–∞
	// Len –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É —Å—Ä–µ–∑–∞
	// Less —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤
	// Swap –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
	var ss sortableStrings = input
	sort.Slice(ss, func(i, j int) bool {
		numI, _ := strconv.Atoi(ss[i][:2])
		numJ, _ := strconv.Atoi(ss[j][:2])
		return numI > numJ // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
	})

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ä–µ–∑ —Å—Ç—Ä–æ–∫
	return ss
}
func (b *Bot) getMap(in models.InMessage, numkzl int) map[string]string {
	var n map[string]string
	n = make(map[string]string)

	if in.Config.DsChannel != "" {
		darkStar, lvlkz := containsSymbolD(in.Lvlkz)
		var err error
		if darkStar {
			n["lvlkz"], err = b.client.Ds.RoleToIdPing(b.getText(in, "drs")+lvlkz, in.Config.Guildid)
		} else {
			n["lvlkz"], err = b.client.Ds.RoleToIdPing(b.getText(in, "rs")+in.Lvlkz, in.Config.Guildid)
		}
		if err != nil {
			b.log.Info(fmt.Sprintf("RoleToIdPing lvl %s CorpName %s err: %+v", in.Lvlkz, in.Config.CorpName, err))
		}
	}

	n["lang"] = in.Config.Country
	n["title"] = b.getText(in, "rs_queue")
	if strings.HasPrefix(in.Lvlkz, "d") {
		n["title"] = b.getText(in, "queue_drs")
	}

	n["description"] = fmt.Sprintf("üëá %s <:rs:918545444425072671> %s (%d) ",
		b.getLanguageText(in.Config.Country, "wishing_to"), n["lvlkz"], numkzl)
	n["EmbedFieldName"] = fmt.Sprintf(" %s %s\n%s %s\n%s %s",
		emOK, b.getLanguageText(in.Config.Country, "to_add_to_queue"),
		emCancel, b.getLanguageText(in.Config.Country, "to_exit_the_queue"),
		emRsStart, b.getLanguageText(in.Config.Country, "forced_start"))
	n["EmbedFieldValue"] = b.getLanguageText(in.Config.Country, "data_updated") + ": "
	n["buttonLevel"] = in.Lvlkz
	return n
}
