// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: telegram.proto

package grpc_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TelegramService_DeleteMessage_FullMethodName           = "/tg.TelegramService/DeleteMessage"
	TelegramService_DeleteMessageSecond_FullMethodName     = "/tg.TelegramService/DeleteMessageSecond"
	TelegramService_EditMessage_FullMethodName             = "/tg.TelegramService/EditMessage"
	TelegramService_EditMessageTextKey_FullMethodName      = "/tg.TelegramService/EditMessageTextKey"
	TelegramService_CheckAdmin_FullMethodName              = "/tg.TelegramService/CheckAdmin"
	TelegramService_GetAvatarUrl_FullMethodName            = "/tg.TelegramService/GetAvatarUrl"
	TelegramService_Send_FullMethodName                    = "/tg.TelegramService/Send"
	TelegramService_SendPoll_FullMethodName                = "/tg.TelegramService/SendPoll"
	TelegramService_SendChannelDelSecond_FullMethodName    = "/tg.TelegramService/SendChannelDelSecond"
	TelegramService_SendHelp_FullMethodName                = "/tg.TelegramService/SendHelp"
	TelegramService_SendEmbedText_FullMethodName           = "/tg.TelegramService/SendEmbedText"
	TelegramService_SendEmbedTime_FullMethodName           = "/tg.TelegramService/SendEmbedTime"
	TelegramService_SendChannelTyping_FullMethodName       = "/tg.TelegramService/SendChannelTyping"
	TelegramService_SendPic_FullMethodName                 = "/tg.TelegramService/SendPic"
	TelegramService_SendBridgeArrayMessages_FullMethodName = "/tg.TelegramService/SendBridgeArrayMessages"
)

// TelegramServiceClient is the client API for TelegramService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelegramServiceClient interface {
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	DeleteMessageSecond(ctx context.Context, in *DeleteMessageSecondRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	EditMessageTextKey(ctx context.Context, in *EditMessageTextKeyRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	CheckAdmin(ctx context.Context, in *CheckAdminRequest, opts ...grpc.CallOption) (*FlagResponse, error)
	GetAvatarUrl(ctx context.Context, in *GetAvatarUrlRequest, opts ...grpc.CallOption) (*TextResponse, error)
	Send(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendPoll(ctx context.Context, in *SendPollRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendChannelDelSecond(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*FlagResponse, error)
	SendHelp(ctx context.Context, in *SendHelpRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendEmbedText(ctx context.Context, in *SendEmbedRequest, opts ...grpc.CallOption) (*IntResponse, error)
	SendEmbedTime(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*IntResponse, error)
	SendChannelTyping(ctx context.Context, in *SendChannelTypingRequest, opts ...grpc.CallOption) (*Empty, error)
	SendPic(ctx context.Context, in *SendPicRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	SendBridgeArrayMessages(ctx context.Context, in *SendBridgeArrayMessagesRequest, opts ...grpc.CallOption) (*SendBridgeArrayMessagesResponse, error)
}

type telegramServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelegramServiceClient(cc grpc.ClientConnInterface) TelegramServiceClient {
	return &telegramServiceClient{cc}
}

func (c *telegramServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, TelegramService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) DeleteMessageSecond(ctx context.Context, in *DeleteMessageSecondRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, TelegramService_DeleteMessageSecond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, TelegramService_EditMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) EditMessageTextKey(ctx context.Context, in *EditMessageTextKeyRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, TelegramService_EditMessageTextKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) CheckAdmin(ctx context.Context, in *CheckAdminRequest, opts ...grpc.CallOption) (*FlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlagResponse)
	err := c.cc.Invoke(ctx, TelegramService_CheckAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) GetAvatarUrl(ctx context.Context, in *GetAvatarUrlRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, TelegramService_GetAvatarUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) Send(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, TelegramService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) SendPoll(ctx context.Context, in *SendPollRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, TelegramService_SendPoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) SendChannelDelSecond(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*FlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlagResponse)
	err := c.cc.Invoke(ctx, TelegramService_SendChannelDelSecond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) SendHelp(ctx context.Context, in *SendHelpRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, TelegramService_SendHelp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) SendEmbedText(ctx context.Context, in *SendEmbedRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, TelegramService_SendEmbedText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) SendEmbedTime(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, TelegramService_SendEmbedTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) SendChannelTyping(ctx context.Context, in *SendChannelTypingRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TelegramService_SendChannelTyping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) SendPic(ctx context.Context, in *SendPicRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, TelegramService_SendPic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) SendBridgeArrayMessages(ctx context.Context, in *SendBridgeArrayMessagesRequest, opts ...grpc.CallOption) (*SendBridgeArrayMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBridgeArrayMessagesResponse)
	err := c.cc.Invoke(ctx, TelegramService_SendBridgeArrayMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramServiceServer is the server API for TelegramService service.
// All implementations must embed UnimplementedTelegramServiceServer
// for forward compatibility.
type TelegramServiceServer interface {
	DeleteMessage(context.Context, *DeleteMessageRequest) (*ErrorResponse, error)
	DeleteMessageSecond(context.Context, *DeleteMessageSecondRequest) (*ErrorResponse, error)
	EditMessage(context.Context, *EditMessageRequest) (*ErrorResponse, error)
	EditMessageTextKey(context.Context, *EditMessageTextKeyRequest) (*ErrorResponse, error)
	CheckAdmin(context.Context, *CheckAdminRequest) (*FlagResponse, error)
	GetAvatarUrl(context.Context, *GetAvatarUrlRequest) (*TextResponse, error)
	Send(context.Context, *SendMessageRequest) (*TextResponse, error)
	SendPoll(context.Context, *SendPollRequest) (*TextResponse, error)
	SendChannelDelSecond(context.Context, *SendMessageRequest) (*FlagResponse, error)
	SendHelp(context.Context, *SendHelpRequest) (*TextResponse, error)
	SendEmbedText(context.Context, *SendEmbedRequest) (*IntResponse, error)
	SendEmbedTime(context.Context, *SendMessageRequest) (*IntResponse, error)
	SendChannelTyping(context.Context, *SendChannelTypingRequest) (*Empty, error)
	SendPic(context.Context, *SendPicRequest) (*ErrorResponse, error)
	SendBridgeArrayMessages(context.Context, *SendBridgeArrayMessagesRequest) (*SendBridgeArrayMessagesResponse, error)
	mustEmbedUnimplementedTelegramServiceServer()
}

// UnimplementedTelegramServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTelegramServiceServer struct{}

func (UnimplementedTelegramServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedTelegramServiceServer) DeleteMessageSecond(context.Context, *DeleteMessageSecondRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessageSecond not implemented")
}
func (UnimplementedTelegramServiceServer) EditMessage(context.Context, *EditMessageRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedTelegramServiceServer) EditMessageTextKey(context.Context, *EditMessageTextKeyRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessageTextKey not implemented")
}
func (UnimplementedTelegramServiceServer) CheckAdmin(context.Context, *CheckAdminRequest) (*FlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAdmin not implemented")
}
func (UnimplementedTelegramServiceServer) GetAvatarUrl(context.Context, *GetAvatarUrlRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatarUrl not implemented")
}
func (UnimplementedTelegramServiceServer) Send(context.Context, *SendMessageRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedTelegramServiceServer) SendPoll(context.Context, *SendPollRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPoll not implemented")
}
func (UnimplementedTelegramServiceServer) SendChannelDelSecond(context.Context, *SendMessageRequest) (*FlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChannelDelSecond not implemented")
}
func (UnimplementedTelegramServiceServer) SendHelp(context.Context, *SendHelpRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHelp not implemented")
}
func (UnimplementedTelegramServiceServer) SendEmbedText(context.Context, *SendEmbedRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmbedText not implemented")
}
func (UnimplementedTelegramServiceServer) SendEmbedTime(context.Context, *SendMessageRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmbedTime not implemented")
}
func (UnimplementedTelegramServiceServer) SendChannelTyping(context.Context, *SendChannelTypingRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChannelTyping not implemented")
}
func (UnimplementedTelegramServiceServer) SendPic(context.Context, *SendPicRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPic not implemented")
}
func (UnimplementedTelegramServiceServer) SendBridgeArrayMessages(context.Context, *SendBridgeArrayMessagesRequest) (*SendBridgeArrayMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBridgeArrayMessages not implemented")
}
func (UnimplementedTelegramServiceServer) mustEmbedUnimplementedTelegramServiceServer() {}
func (UnimplementedTelegramServiceServer) testEmbeddedByValue()                         {}

// UnsafeTelegramServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelegramServiceServer will
// result in compilation errors.
type UnsafeTelegramServiceServer interface {
	mustEmbedUnimplementedTelegramServiceServer()
}

func RegisterTelegramServiceServer(s grpc.ServiceRegistrar, srv TelegramServiceServer) {
	// If the following call pancis, it indicates UnimplementedTelegramServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TelegramService_ServiceDesc, srv)
}

func _TelegramService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_DeleteMessageSecond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageSecondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).DeleteMessageSecond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_DeleteMessageSecond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).DeleteMessageSecond(ctx, req.(*DeleteMessageSecondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_EditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).EditMessage(ctx, req.(*EditMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_EditMessageTextKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageTextKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).EditMessageTextKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_EditMessageTextKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).EditMessageTextKey(ctx, req.(*EditMessageTextKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_CheckAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).CheckAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_CheckAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).CheckAdmin(ctx, req.(*CheckAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_GetAvatarUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvatarUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).GetAvatarUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_GetAvatarUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).GetAvatarUrl(ctx, req.(*GetAvatarUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).Send(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_SendPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).SendPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_SendPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).SendPoll(ctx, req.(*SendPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_SendChannelDelSecond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).SendChannelDelSecond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_SendChannelDelSecond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).SendChannelDelSecond(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_SendHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendHelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).SendHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_SendHelp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).SendHelp(ctx, req.(*SendHelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_SendEmbedText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmbedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).SendEmbedText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_SendEmbedText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).SendEmbedText(ctx, req.(*SendEmbedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_SendEmbedTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).SendEmbedTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_SendEmbedTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).SendEmbedTime(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_SendChannelTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChannelTypingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).SendChannelTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_SendChannelTyping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).SendChannelTyping(ctx, req.(*SendChannelTypingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_SendPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).SendPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_SendPic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).SendPic(ctx, req.(*SendPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_SendBridgeArrayMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBridgeArrayMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).SendBridgeArrayMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramService_SendBridgeArrayMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).SendBridgeArrayMessages(ctx, req.(*SendBridgeArrayMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelegramService_ServiceDesc is the grpc.ServiceDesc for TelegramService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelegramService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tg.TelegramService",
	HandlerType: (*TelegramServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteMessage",
			Handler:    _TelegramService_DeleteMessage_Handler,
		},
		{
			MethodName: "DeleteMessageSecond",
			Handler:    _TelegramService_DeleteMessageSecond_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _TelegramService_EditMessage_Handler,
		},
		{
			MethodName: "EditMessageTextKey",
			Handler:    _TelegramService_EditMessageTextKey_Handler,
		},
		{
			MethodName: "CheckAdmin",
			Handler:    _TelegramService_CheckAdmin_Handler,
		},
		{
			MethodName: "GetAvatarUrl",
			Handler:    _TelegramService_GetAvatarUrl_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _TelegramService_Send_Handler,
		},
		{
			MethodName: "SendPoll",
			Handler:    _TelegramService_SendPoll_Handler,
		},
		{
			MethodName: "SendChannelDelSecond",
			Handler:    _TelegramService_SendChannelDelSecond_Handler,
		},
		{
			MethodName: "SendHelp",
			Handler:    _TelegramService_SendHelp_Handler,
		},
		{
			MethodName: "SendEmbedText",
			Handler:    _TelegramService_SendEmbedText_Handler,
		},
		{
			MethodName: "SendEmbedTime",
			Handler:    _TelegramService_SendEmbedTime_Handler,
		},
		{
			MethodName: "SendChannelTyping",
			Handler:    _TelegramService_SendChannelTyping_Handler,
		},
		{
			MethodName: "SendPic",
			Handler:    _TelegramService_SendPic_Handler,
		},
		{
			MethodName: "SendBridgeArrayMessages",
			Handler:    _TelegramService_SendBridgeArrayMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telegram.proto",
}
