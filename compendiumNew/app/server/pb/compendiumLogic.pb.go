// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0--rc2
// source: compendiumLogic.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IncomingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	DmChat      string `protobuf:"bytes,2,opt,name=dmChat,proto3" json:"dmChat,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MentionName string `protobuf:"bytes,4,opt,name=mentionName,proto3" json:"mentionName,omitempty"`
	NameId      string `protobuf:"bytes,5,opt,name=nameId,proto3" json:"nameId,omitempty"`
	NickName    string `protobuf:"bytes,6,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Avatar      string `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	ChannelId   string `protobuf:"bytes,8,opt,name=channelId,proto3" json:"channelId,omitempty"`
	GuildId     string `protobuf:"bytes,9,opt,name=guildId,proto3" json:"guildId,omitempty"`
	GuildName   string `protobuf:"bytes,10,opt,name=guildName,proto3" json:"guildName,omitempty"`
	GuildAvatar string `protobuf:"bytes,11,opt,name=guildAvatar,proto3" json:"guildAvatar,omitempty"`
	Type        string `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	Language    string `protobuf:"bytes,13,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *IncomingMessage) Reset() {
	*x = IncomingMessage{}
	mi := &file_compendiumLogic_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncomingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingMessage) ProtoMessage() {}

func (x *IncomingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_compendiumLogic_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingMessage.ProtoReflect.Descriptor instead.
func (*IncomingMessage) Descriptor() ([]byte, []int) {
	return file_compendiumLogic_proto_rawDescGZIP(), []int{0}
}

func (x *IncomingMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *IncomingMessage) GetDmChat() string {
	if x != nil {
		return x.DmChat
	}
	return ""
}

func (x *IncomingMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IncomingMessage) GetMentionName() string {
	if x != nil {
		return x.MentionName
	}
	return ""
}

func (x *IncomingMessage) GetNameId() string {
	if x != nil {
		return x.NameId
	}
	return ""
}

func (x *IncomingMessage) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *IncomingMessage) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *IncomingMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *IncomingMessage) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *IncomingMessage) GetGuildName() string {
	if x != nil {
		return x.GuildName
	}
	return ""
}

func (x *IncomingMessage) GetGuildAvatar() string {
	if x != nil {
		return x.GuildAvatar
	}
	return ""
}

func (x *IncomingMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IncomingMessage) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ReqCorpMembersApiRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid  string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	GuildId string `protobuf:"bytes,2,opt,name=guildId,proto3" json:"guildId,omitempty"`
}

func (x *ReqCorpMembersApiRead) Reset() {
	*x = ReqCorpMembersApiRead{}
	mi := &file_compendiumLogic_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReqCorpMembersApiRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCorpMembersApiRead) ProtoMessage() {}

func (x *ReqCorpMembersApiRead) ProtoReflect() protoreflect.Message {
	mi := &file_compendiumLogic_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCorpMembersApiRead.ProtoReflect.Descriptor instead.
func (*ReqCorpMembersApiRead) Descriptor() ([]byte, []int) {
	return file_compendiumLogic_proto_rawDescGZIP(), []int{1}
}

func (x *ReqCorpMembersApiRead) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *ReqCorpMembersApiRead) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

type ReqApiGetUserAlts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (x *ReqApiGetUserAlts) Reset() {
	*x = ReqApiGetUserAlts{}
	mi := &file_compendiumLogic_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReqApiGetUserAlts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqApiGetUserAlts) ProtoMessage() {}

func (x *ReqApiGetUserAlts) ProtoReflect() protoreflect.Message {
	mi := &file_compendiumLogic_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqApiGetUserAlts.ProtoReflect.Descriptor instead.
func (*ReqApiGetUserAlts) Descriptor() ([]byte, []int) {
	return file_compendiumLogic_proto_rawDescGZIP(), []int{2}
}

func (x *ReqApiGetUserAlts) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

type ResApiGetUserAlts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alts []string `protobuf:"bytes,1,rep,name=alts,proto3" json:"alts,omitempty"`
}

func (x *ResApiGetUserAlts) Reset() {
	*x = ResApiGetUserAlts{}
	mi := &file_compendiumLogic_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResApiGetUserAlts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResApiGetUserAlts) ProtoMessage() {}

func (x *ResApiGetUserAlts) ProtoReflect() protoreflect.Message {
	mi := &file_compendiumLogic_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResApiGetUserAlts.ProtoReflect.Descriptor instead.
func (*ResApiGetUserAlts) Descriptor() ([]byte, []int) {
	return file_compendiumLogic_proto_rawDescGZIP(), []int{3}
}

func (x *ResApiGetUserAlts) GetAlts() []string {
	if x != nil {
		return x.Alts
	}
	return nil
}

type ResCorpMembersApiRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Array []*CorpMember `protobuf:"bytes,1,rep,name=array,proto3" json:"array,omitempty"`
}

func (x *ResCorpMembersApiRead) Reset() {
	*x = ResCorpMembersApiRead{}
	mi := &file_compendiumLogic_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResCorpMembersApiRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCorpMembersApiRead) ProtoMessage() {}

func (x *ResCorpMembersApiRead) ProtoReflect() protoreflect.Message {
	mi := &file_compendiumLogic_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCorpMembersApiRead.ProtoReflect.Descriptor instead.
func (*ResCorpMembersApiRead) Descriptor() ([]byte, []int) {
	return file_compendiumLogic_proto_rawDescGZIP(), []int{4}
}

func (x *ResCorpMembersApiRead) GetArray() []*CorpMember {
	if x != nil {
		return x.Array
	}
	return nil
}

type CorpMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UserId      string                `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	GuildId     string                `protobuf:"bytes,3,opt,name=guildId,proto3" json:"guildId,omitempty"`
	Avatar      string                `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Tech        map[int32]*TechLevels `protobuf:"bytes,5,rep,name=tech,proto3" json:"tech,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AvatarUrl   string                `protobuf:"bytes,6,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	LocalTime   string                `protobuf:"bytes,7,opt,name=localTime,proto3" json:"localTime,omitempty"`
	LocalTime24 string                `protobuf:"bytes,8,opt,name=localTime24,proto3" json:"localTime24,omitempty"`
	TimeZone    string                `protobuf:"bytes,9,opt,name=timeZone,proto3" json:"timeZone,omitempty"`
	ZoneOffset  int32                 `protobuf:"varint,10,opt,name=zoneOffset,proto3" json:"zoneOffset,omitempty"`
	AfkFor      string                `protobuf:"bytes,11,opt,name=afkFor,proto3" json:"afkFor,omitempty"`
	AfkWhen     int32                 `protobuf:"varint,12,opt,name=afkWhen,proto3" json:"afkWhen,omitempty"`
}

func (x *CorpMember) Reset() {
	*x = CorpMember{}
	mi := &file_compendiumLogic_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorpMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorpMember) ProtoMessage() {}

func (x *CorpMember) ProtoReflect() protoreflect.Message {
	mi := &file_compendiumLogic_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorpMember.ProtoReflect.Descriptor instead.
func (*CorpMember) Descriptor() ([]byte, []int) {
	return file_compendiumLogic_proto_rawDescGZIP(), []int{5}
}

func (x *CorpMember) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CorpMember) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CorpMember) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *CorpMember) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *CorpMember) GetTech() map[int32]*TechLevels {
	if x != nil {
		return x.Tech
	}
	return nil
}

func (x *CorpMember) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *CorpMember) GetLocalTime() string {
	if x != nil {
		return x.LocalTime
	}
	return ""
}

func (x *CorpMember) GetLocalTime24() string {
	if x != nil {
		return x.LocalTime24
	}
	return ""
}

func (x *CorpMember) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *CorpMember) GetZoneOffset() int32 {
	if x != nil {
		return x.ZoneOffset
	}
	return 0
}

func (x *CorpMember) GetAfkFor() string {
	if x != nil {
		return x.AfkFor
	}
	return ""
}

func (x *CorpMember) GetAfkWhen() int32 {
	if x != nil {
		return x.AfkWhen
	}
	return 0
}

type TechLevels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tech []*TechLevel `protobuf:"bytes,1,rep,name=tech,proto3" json:"tech,omitempty"`
}

func (x *TechLevels) Reset() {
	*x = TechLevels{}
	mi := &file_compendiumLogic_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechLevels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechLevels) ProtoMessage() {}

func (x *TechLevels) ProtoReflect() protoreflect.Message {
	mi := &file_compendiumLogic_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechLevels.ProtoReflect.Descriptor instead.
func (*TechLevels) Descriptor() ([]byte, []int) {
	return file_compendiumLogic_proto_rawDescGZIP(), []int{6}
}

func (x *TechLevels) GetTech() []*TechLevel {
	if x != nil {
		return x.Tech
	}
	return nil
}

type TechLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts    int64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Level int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *TechLevel) Reset() {
	*x = TechLevel{}
	mi := &file_compendiumLogic_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechLevel) ProtoMessage() {}

func (x *TechLevel) ProtoReflect() protoreflect.Message {
	mi := &file_compendiumLogic_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechLevel.ProtoReflect.Descriptor instead.
func (*TechLevel) Descriptor() ([]byte, []int) {
	return file_compendiumLogic_proto_rawDescGZIP(), []int{7}
}

func (x *TechLevel) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *TechLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// Пустое сообщение для ответов, не требующих данных
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_compendiumLogic_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_compendiumLogic_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_compendiumLogic_proto_rawDescGZIP(), []int{8}
}

var File_compendiumLogic_proto protoreflect.FileDescriptor

var file_compendiumLogic_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x22, 0xe7, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x22, 0x49, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x43, 0x6f, 0x72, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x2b, 0x0a,
	0x11, 0x72, 0x65, 0x71, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x6c, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x72, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65, 0x61, 0x64, 0x12, 0x31, 0x0a, 0x05,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x43, 0x6f,
	0x72, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x22,
	0xc7, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x39, 0x0a, 0x04,
	0x74, 0x65, 0x63, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x72,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x74, 0x65, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x66, 0x6b, 0x46, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x66, 0x6b, 0x46, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x66, 0x6b,
	0x57, 0x68, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x66, 0x6b, 0x57,
	0x68, 0x65, 0x6e, 0x1a, 0x54, 0x0a, 0x09, 0x54, 0x65, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x0a, 0x54, 0x65, 0x63,
	0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x65, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x04, 0x74, 0x65, 0x63, 0x68, 0x22, 0x31, 0x0a, 0x09, 0x54, 0x65, 0x63, 0x68, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0x98, 0x02, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75,
	0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x64,
	0x0a, 0x12, 0x43, 0x6f, 0x72, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75,
	0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x65, 0x71, 0x43, 0x6f, 0x72, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72,
	0x65, 0x73, 0x43, 0x6f, 0x72, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x58, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6c, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x65, 0x71, 0x41, 0x70, 0x69, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x73, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x65, 0x73,
	0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x73, 0x42, 0x1b,
	0x5a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x3b, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_compendiumLogic_proto_rawDescOnce sync.Once
	file_compendiumLogic_proto_rawDescData = file_compendiumLogic_proto_rawDesc
)

func file_compendiumLogic_proto_rawDescGZIP() []byte {
	file_compendiumLogic_proto_rawDescOnce.Do(func() {
		file_compendiumLogic_proto_rawDescData = protoimpl.X.CompressGZIP(file_compendiumLogic_proto_rawDescData)
	})
	return file_compendiumLogic_proto_rawDescData
}

var file_compendiumLogic_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_compendiumLogic_proto_goTypes = []any{
	(*IncomingMessage)(nil),       // 0: compendiumLogic.IncomingMessage
	(*ReqCorpMembersApiRead)(nil), // 1: compendiumLogic.reqCorpMembersApiRead
	(*ReqApiGetUserAlts)(nil),     // 2: compendiumLogic.reqApiGetUserAlts
	(*ResApiGetUserAlts)(nil),     // 3: compendiumLogic.resApiGetUserAlts
	(*ResCorpMembersApiRead)(nil), // 4: compendiumLogic.resCorpMembersApiRead
	(*CorpMember)(nil),            // 5: compendiumLogic.CorpMember
	(*TechLevels)(nil),            // 6: compendiumLogic.TechLevels
	(*TechLevel)(nil),             // 7: compendiumLogic.TechLevel
	(*Empty)(nil),                 // 8: compendiumLogic.Empty
	nil,                           // 9: compendiumLogic.CorpMember.TechEntry
}
var file_compendiumLogic_proto_depIdxs = []int32{
	5, // 0: compendiumLogic.resCorpMembersApiRead.array:type_name -> compendiumLogic.CorpMember
	9, // 1: compendiumLogic.CorpMember.tech:type_name -> compendiumLogic.CorpMember.TechEntry
	7, // 2: compendiumLogic.TechLevels.tech:type_name -> compendiumLogic.TechLevel
	6, // 3: compendiumLogic.CorpMember.TechEntry.value:type_name -> compendiumLogic.TechLevels
	0, // 4: compendiumLogic.LogicService.InboxMessage:input_type -> compendiumLogic.IncomingMessage
	1, // 5: compendiumLogic.LogicService.CorpMembersApiRead:input_type -> compendiumLogic.reqCorpMembersApiRead
	2, // 6: compendiumLogic.LogicService.apiGetUserAlts:input_type -> compendiumLogic.reqApiGetUserAlts
	8, // 7: compendiumLogic.LogicService.InboxMessage:output_type -> compendiumLogic.Empty
	4, // 8: compendiumLogic.LogicService.CorpMembersApiRead:output_type -> compendiumLogic.resCorpMembersApiRead
	3, // 9: compendiumLogic.LogicService.apiGetUserAlts:output_type -> compendiumLogic.resApiGetUserAlts
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_compendiumLogic_proto_init() }
func file_compendiumLogic_proto_init() {
	if File_compendiumLogic_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compendiumLogic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_compendiumLogic_proto_goTypes,
		DependencyIndexes: file_compendiumLogic_proto_depIdxs,
		MessageInfos:      file_compendiumLogic_proto_msgTypes,
	}.Build()
	File_compendiumLogic_proto = out.File
	file_compendiumLogic_proto_rawDesc = nil
	file_compendiumLogic_proto_goTypes = nil
	file_compendiumLogic_proto_depIdxs = nil
}
