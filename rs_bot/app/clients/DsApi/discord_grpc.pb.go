// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: discord.proto

package ds

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BotService_CleanChat_FullMethodName               = "/ds.BotService/CleanChat"
	BotService_CleanRsBotOtherMessage_FullMethodName  = "/ds.BotService/CleanRsBotOtherMessage"
	BotService_CleanOldMessageChannel_FullMethodName  = "/ds.BotService/CleanOldMessageChannel"
	BotService_CheckAdmin_FullMethodName              = "/ds.BotService/CheckAdmin"
	BotService_CheckRole_FullMethodName               = "/ds.BotService/CheckRole"
	BotService_ChannelTyping_FullMethodName           = "/ds.BotService/ChannelTyping"
	BotService_DeleteMessage_FullMethodName           = "/ds.BotService/DeleteMessage"
	BotService_DeleteMessageSecond_FullMethodName     = "/ds.BotService/DeleteMessageSecond"
	BotService_EditComplexButton_FullMethodName       = "/ds.BotService/EditComplexButton"
	BotService_EditWebhook_FullMethodName             = "/ds.BotService/EditWebhook"
	BotService_EditMessage_FullMethodName             = "/ds.BotService/EditMessage"
	BotService_GetAvatarUrl_FullMethodName            = "/ds.BotService/GetAvatarUrl"
	BotService_GetRoles_FullMethodName                = "/ds.BotService/GetRoles"
	BotService_GetMembersRoles_FullMethodName         = "/ds.BotService/GetMembersRoles"
	BotService_QueueSend_FullMethodName               = "/ds.BotService/QueueSend"
	BotService_ReplaceTextMessage_FullMethodName      = "/ds.BotService/ReplaceTextMessage"
	BotService_RoleToIdPing_FullMethodName            = "/ds.BotService/RoleToIdPing"
	BotService_SendDmText_FullMethodName              = "/ds.BotService/SendDmText"
	BotService_Send_FullMethodName                    = "/ds.BotService/Send"
	BotService_SendBridgeArrayMessages_FullMethodName = "/ds.BotService/SendBridgeArrayMessages"
	BotService_SendChannelDelSecond_FullMethodName    = "/ds.BotService/SendChannelDelSecond"
	BotService_SendEmbedTime_FullMethodName           = "/ds.BotService/SendEmbedTime"
	BotService_SendComplexContent_FullMethodName      = "/ds.BotService/SendComplexContent"
	BotService_SendComplex_FullMethodName             = "/ds.BotService/SendComplex"
	BotService_SendEmbedText_FullMethodName           = "/ds.BotService/SendEmbedText"
	BotService_SendHelp_FullMethodName                = "/ds.BotService/SendHelp"
	BotService_SendPoll_FullMethodName                = "/ds.BotService/SendPoll"
	BotService_SendPic_FullMethodName                 = "/ds.BotService/SendPic"
	BotService_SendWebhook_FullMethodName             = "/ds.BotService/SendWebhook"
	BotService_Subscribe_FullMethodName               = "/ds.BotService/Subscribe"
	BotService_Unsubscribe_FullMethodName             = "/ds.BotService/Unsubscribe"
)

// BotServiceClient is the client API for BotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotServiceClient interface {
	CleanChat(ctx context.Context, in *CleanChatRequest, opts ...grpc.CallOption) (*Empty, error)
	CleanRsBotOtherMessage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CleanOldMessageChannel(ctx context.Context, in *CleanOldMessageChannelRequest, opts ...grpc.CallOption) (*Empty, error)
	CheckAdmin(ctx context.Context, in *CheckAdminRequest, opts ...grpc.CallOption) (*FlagResponse, error)
	CheckRole(ctx context.Context, in *CheckRoleRequest, opts ...grpc.CallOption) (*FlagResponse, error)
	ChannelTyping(ctx context.Context, in *ChannelTypingRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteMessageSecond(ctx context.Context, in *DeleteMessageSecondRequest, opts ...grpc.CallOption) (*Empty, error)
	EditComplexButton(ctx context.Context, in *EditComplexButtonRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	EditWebhook(ctx context.Context, in *EditWebhookRequest, opts ...grpc.CallOption) (*Empty, error)
	EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAvatarUrl(ctx context.Context, in *GetAvatarUrlRequest, opts ...grpc.CallOption) (*TextResponse, error)
	GetRoles(ctx context.Context, in *GuildRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	GetMembersRoles(ctx context.Context, in *GuildRequest, opts ...grpc.CallOption) (*MembersRolesResponse, error)
	QueueSend(ctx context.Context, in *QueueSendRequest, opts ...grpc.CallOption) (*Empty, error)
	ReplaceTextMessage(ctx context.Context, in *ReplaceTextMessageRequest, opts ...grpc.CallOption) (*TextResponse, error)
	RoleToIdPing(ctx context.Context, in *RoleToIdPingRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendDmText(ctx context.Context, in *SendDmTextRequest, opts ...grpc.CallOption) (*Empty, error)
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendBridgeArrayMessages(ctx context.Context, in *SendBridgeArrayMessagesRequest, opts ...grpc.CallOption) (*SendBridgeArrayMessagesResponse, error)
	SendChannelDelSecond(ctx context.Context, in *SendChannelDelSecondRequest, opts ...grpc.CallOption) (*Empty, error)
	SendEmbedTime(ctx context.Context, in *SendEmbedTimeRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendComplexContent(ctx context.Context, in *SendComplexContentRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendComplex(ctx context.Context, in *SendComplexRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendEmbedText(ctx context.Context, in *SendEmbedTextRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendHelp(ctx context.Context, in *SendHelpRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendPoll(ctx context.Context, in *SendPollRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendPic(ctx context.Context, in *SendPicRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	SendWebhook(ctx context.Context, in *SendWebhookRequest, opts ...grpc.CallOption) (*TextResponse, error)
	Subscribe(ctx context.Context, in *SubscrRequest, opts ...grpc.CallOption) (*IntResponse, error)
	Unsubscribe(ctx context.Context, in *SubscrRequest, opts ...grpc.CallOption) (*IntResponse, error)
}

type botServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBotServiceClient(cc grpc.ClientConnInterface) BotServiceClient {
	return &botServiceClient{cc}
}

func (c *botServiceClient) CleanChat(ctx context.Context, in *CleanChatRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BotService_CleanChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) CleanRsBotOtherMessage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BotService_CleanRsBotOtherMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) CleanOldMessageChannel(ctx context.Context, in *CleanOldMessageChannelRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BotService_CleanOldMessageChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) CheckAdmin(ctx context.Context, in *CheckAdminRequest, opts ...grpc.CallOption) (*FlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlagResponse)
	err := c.cc.Invoke(ctx, BotService_CheckAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) CheckRole(ctx context.Context, in *CheckRoleRequest, opts ...grpc.CallOption) (*FlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlagResponse)
	err := c.cc.Invoke(ctx, BotService_CheckRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) ChannelTyping(ctx context.Context, in *ChannelTypingRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BotService_ChannelTyping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BotService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) DeleteMessageSecond(ctx context.Context, in *DeleteMessageSecondRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BotService_DeleteMessageSecond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) EditComplexButton(ctx context.Context, in *EditComplexButtonRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, BotService_EditComplexButton_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) EditWebhook(ctx context.Context, in *EditWebhookRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BotService_EditWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BotService_EditMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) GetAvatarUrl(ctx context.Context, in *GetAvatarUrlRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, BotService_GetAvatarUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) GetRoles(ctx context.Context, in *GuildRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, BotService_GetRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) GetMembersRoles(ctx context.Context, in *GuildRequest, opts ...grpc.CallOption) (*MembersRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MembersRolesResponse)
	err := c.cc.Invoke(ctx, BotService_GetMembersRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) QueueSend(ctx context.Context, in *QueueSendRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BotService_QueueSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) ReplaceTextMessage(ctx context.Context, in *ReplaceTextMessageRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, BotService_ReplaceTextMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) RoleToIdPing(ctx context.Context, in *RoleToIdPingRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, BotService_RoleToIdPing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) SendDmText(ctx context.Context, in *SendDmTextRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BotService_SendDmText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, BotService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) SendBridgeArrayMessages(ctx context.Context, in *SendBridgeArrayMessagesRequest, opts ...grpc.CallOption) (*SendBridgeArrayMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBridgeArrayMessagesResponse)
	err := c.cc.Invoke(ctx, BotService_SendBridgeArrayMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) SendChannelDelSecond(ctx context.Context, in *SendChannelDelSecondRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BotService_SendChannelDelSecond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) SendEmbedTime(ctx context.Context, in *SendEmbedTimeRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, BotService_SendEmbedTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) SendComplexContent(ctx context.Context, in *SendComplexContentRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, BotService_SendComplexContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) SendComplex(ctx context.Context, in *SendComplexRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, BotService_SendComplex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) SendEmbedText(ctx context.Context, in *SendEmbedTextRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, BotService_SendEmbedText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) SendHelp(ctx context.Context, in *SendHelpRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, BotService_SendHelp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) SendPoll(ctx context.Context, in *SendPollRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, BotService_SendPoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) SendPic(ctx context.Context, in *SendPicRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, BotService_SendPic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) SendWebhook(ctx context.Context, in *SendWebhookRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, BotService_SendWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) Subscribe(ctx context.Context, in *SubscrRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, BotService_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) Unsubscribe(ctx context.Context, in *SubscrRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, BotService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotServiceServer is the server API for BotService service.
// All implementations must embed UnimplementedBotServiceServer
// for forward compatibility.
type BotServiceServer interface {
	CleanChat(context.Context, *CleanChatRequest) (*Empty, error)
	CleanRsBotOtherMessage(context.Context, *Empty) (*Empty, error)
	CleanOldMessageChannel(context.Context, *CleanOldMessageChannelRequest) (*Empty, error)
	CheckAdmin(context.Context, *CheckAdminRequest) (*FlagResponse, error)
	CheckRole(context.Context, *CheckRoleRequest) (*FlagResponse, error)
	ChannelTyping(context.Context, *ChannelTypingRequest) (*Empty, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*Empty, error)
	DeleteMessageSecond(context.Context, *DeleteMessageSecondRequest) (*Empty, error)
	EditComplexButton(context.Context, *EditComplexButtonRequest) (*ErrorResponse, error)
	EditWebhook(context.Context, *EditWebhookRequest) (*Empty, error)
	EditMessage(context.Context, *EditMessageRequest) (*Empty, error)
	GetAvatarUrl(context.Context, *GetAvatarUrlRequest) (*TextResponse, error)
	GetRoles(context.Context, *GuildRequest) (*GetRolesResponse, error)
	GetMembersRoles(context.Context, *GuildRequest) (*MembersRolesResponse, error)
	QueueSend(context.Context, *QueueSendRequest) (*Empty, error)
	ReplaceTextMessage(context.Context, *ReplaceTextMessageRequest) (*TextResponse, error)
	RoleToIdPing(context.Context, *RoleToIdPingRequest) (*TextResponse, error)
	SendDmText(context.Context, *SendDmTextRequest) (*Empty, error)
	Send(context.Context, *SendRequest) (*TextResponse, error)
	SendBridgeArrayMessages(context.Context, *SendBridgeArrayMessagesRequest) (*SendBridgeArrayMessagesResponse, error)
	SendChannelDelSecond(context.Context, *SendChannelDelSecondRequest) (*Empty, error)
	SendEmbedTime(context.Context, *SendEmbedTimeRequest) (*TextResponse, error)
	SendComplexContent(context.Context, *SendComplexContentRequest) (*TextResponse, error)
	SendComplex(context.Context, *SendComplexRequest) (*TextResponse, error)
	SendEmbedText(context.Context, *SendEmbedTextRequest) (*TextResponse, error)
	SendHelp(context.Context, *SendHelpRequest) (*TextResponse, error)
	SendPoll(context.Context, *SendPollRequest) (*TextResponse, error)
	SendPic(context.Context, *SendPicRequest) (*ErrorResponse, error)
	SendWebhook(context.Context, *SendWebhookRequest) (*TextResponse, error)
	Subscribe(context.Context, *SubscrRequest) (*IntResponse, error)
	Unsubscribe(context.Context, *SubscrRequest) (*IntResponse, error)
	mustEmbedUnimplementedBotServiceServer()
}

// UnimplementedBotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBotServiceServer struct{}

func (UnimplementedBotServiceServer) CleanChat(context.Context, *CleanChatRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanChat not implemented")
}
func (UnimplementedBotServiceServer) CleanRsBotOtherMessage(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanRsBotOtherMessage not implemented")
}
func (UnimplementedBotServiceServer) CleanOldMessageChannel(context.Context, *CleanOldMessageChannelRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanOldMessageChannel not implemented")
}
func (UnimplementedBotServiceServer) CheckAdmin(context.Context, *CheckAdminRequest) (*FlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAdmin not implemented")
}
func (UnimplementedBotServiceServer) CheckRole(context.Context, *CheckRoleRequest) (*FlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRole not implemented")
}
func (UnimplementedBotServiceServer) ChannelTyping(context.Context, *ChannelTypingRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelTyping not implemented")
}
func (UnimplementedBotServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedBotServiceServer) DeleteMessageSecond(context.Context, *DeleteMessageSecondRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessageSecond not implemented")
}
func (UnimplementedBotServiceServer) EditComplexButton(context.Context, *EditComplexButtonRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditComplexButton not implemented")
}
func (UnimplementedBotServiceServer) EditWebhook(context.Context, *EditWebhookRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditWebhook not implemented")
}
func (UnimplementedBotServiceServer) EditMessage(context.Context, *EditMessageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedBotServiceServer) GetAvatarUrl(context.Context, *GetAvatarUrlRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatarUrl not implemented")
}
func (UnimplementedBotServiceServer) GetRoles(context.Context, *GuildRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedBotServiceServer) GetMembersRoles(context.Context, *GuildRequest) (*MembersRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembersRoles not implemented")
}
func (UnimplementedBotServiceServer) QueueSend(context.Context, *QueueSendRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueSend not implemented")
}
func (UnimplementedBotServiceServer) ReplaceTextMessage(context.Context, *ReplaceTextMessageRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceTextMessage not implemented")
}
func (UnimplementedBotServiceServer) RoleToIdPing(context.Context, *RoleToIdPingRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleToIdPing not implemented")
}
func (UnimplementedBotServiceServer) SendDmText(context.Context, *SendDmTextRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDmText not implemented")
}
func (UnimplementedBotServiceServer) Send(context.Context, *SendRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedBotServiceServer) SendBridgeArrayMessages(context.Context, *SendBridgeArrayMessagesRequest) (*SendBridgeArrayMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBridgeArrayMessages not implemented")
}
func (UnimplementedBotServiceServer) SendChannelDelSecond(context.Context, *SendChannelDelSecondRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChannelDelSecond not implemented")
}
func (UnimplementedBotServiceServer) SendEmbedTime(context.Context, *SendEmbedTimeRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmbedTime not implemented")
}
func (UnimplementedBotServiceServer) SendComplexContent(context.Context, *SendComplexContentRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendComplexContent not implemented")
}
func (UnimplementedBotServiceServer) SendComplex(context.Context, *SendComplexRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendComplex not implemented")
}
func (UnimplementedBotServiceServer) SendEmbedText(context.Context, *SendEmbedTextRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmbedText not implemented")
}
func (UnimplementedBotServiceServer) SendHelp(context.Context, *SendHelpRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHelp not implemented")
}
func (UnimplementedBotServiceServer) SendPoll(context.Context, *SendPollRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPoll not implemented")
}
func (UnimplementedBotServiceServer) SendPic(context.Context, *SendPicRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPic not implemented")
}
func (UnimplementedBotServiceServer) SendWebhook(context.Context, *SendWebhookRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebhook not implemented")
}
func (UnimplementedBotServiceServer) Subscribe(context.Context, *SubscrRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedBotServiceServer) Unsubscribe(context.Context, *SubscrRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedBotServiceServer) mustEmbedUnimplementedBotServiceServer() {}
func (UnimplementedBotServiceServer) testEmbeddedByValue()                    {}

// UnsafeBotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotServiceServer will
// result in compilation errors.
type UnsafeBotServiceServer interface {
	mustEmbedUnimplementedBotServiceServer()
}

func RegisterBotServiceServer(s grpc.ServiceRegistrar, srv BotServiceServer) {
	// If the following call pancis, it indicates UnimplementedBotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BotService_ServiceDesc, srv)
}

func _BotService_CleanChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).CleanChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_CleanChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).CleanChat(ctx, req.(*CleanChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_CleanRsBotOtherMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).CleanRsBotOtherMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_CleanRsBotOtherMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).CleanRsBotOtherMessage(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_CleanOldMessageChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanOldMessageChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).CleanOldMessageChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_CleanOldMessageChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).CleanOldMessageChannel(ctx, req.(*CleanOldMessageChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_CheckAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).CheckAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_CheckAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).CheckAdmin(ctx, req.(*CheckAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_CheckRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).CheckRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_CheckRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).CheckRole(ctx, req.(*CheckRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_ChannelTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelTypingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).ChannelTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_ChannelTyping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).ChannelTyping(ctx, req.(*ChannelTypingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_DeleteMessageSecond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageSecondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).DeleteMessageSecond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_DeleteMessageSecond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).DeleteMessageSecond(ctx, req.(*DeleteMessageSecondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_EditComplexButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditComplexButtonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).EditComplexButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_EditComplexButton_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).EditComplexButton(ctx, req.(*EditComplexButtonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_EditWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).EditWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_EditWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).EditWebhook(ctx, req.(*EditWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_EditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).EditMessage(ctx, req.(*EditMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_GetAvatarUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvatarUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).GetAvatarUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_GetAvatarUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).GetAvatarUrl(ctx, req.(*GetAvatarUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_GetRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).GetRoles(ctx, req.(*GuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_GetMembersRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).GetMembersRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_GetMembersRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).GetMembersRoles(ctx, req.(*GuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_QueueSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).QueueSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_QueueSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).QueueSend(ctx, req.(*QueueSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_ReplaceTextMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceTextMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).ReplaceTextMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_ReplaceTextMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).ReplaceTextMessage(ctx, req.(*ReplaceTextMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_RoleToIdPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleToIdPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).RoleToIdPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_RoleToIdPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).RoleToIdPing(ctx, req.(*RoleToIdPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_SendDmText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDmTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).SendDmText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_SendDmText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).SendDmText(ctx, req.(*SendDmTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_SendBridgeArrayMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBridgeArrayMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).SendBridgeArrayMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_SendBridgeArrayMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).SendBridgeArrayMessages(ctx, req.(*SendBridgeArrayMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_SendChannelDelSecond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChannelDelSecondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).SendChannelDelSecond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_SendChannelDelSecond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).SendChannelDelSecond(ctx, req.(*SendChannelDelSecondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_SendEmbedTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmbedTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).SendEmbedTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_SendEmbedTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).SendEmbedTime(ctx, req.(*SendEmbedTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_SendComplexContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendComplexContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).SendComplexContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_SendComplexContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).SendComplexContent(ctx, req.(*SendComplexContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_SendComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendComplexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).SendComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_SendComplex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).SendComplex(ctx, req.(*SendComplexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_SendEmbedText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmbedTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).SendEmbedText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_SendEmbedText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).SendEmbedText(ctx, req.(*SendEmbedTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_SendHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendHelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).SendHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_SendHelp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).SendHelp(ctx, req.(*SendHelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_SendPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).SendPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_SendPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).SendPoll(ctx, req.(*SendPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_SendPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).SendPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_SendPic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).SendPic(ctx, req.(*SendPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_SendWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).SendWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_SendWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).SendWebhook(ctx, req.(*SendWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).Subscribe(ctx, req.(*SubscrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).Unsubscribe(ctx, req.(*SubscrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotService_ServiceDesc is the grpc.ServiceDesc for BotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ds.BotService",
	HandlerType: (*BotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CleanChat",
			Handler:    _BotService_CleanChat_Handler,
		},
		{
			MethodName: "CleanRsBotOtherMessage",
			Handler:    _BotService_CleanRsBotOtherMessage_Handler,
		},
		{
			MethodName: "CleanOldMessageChannel",
			Handler:    _BotService_CleanOldMessageChannel_Handler,
		},
		{
			MethodName: "CheckAdmin",
			Handler:    _BotService_CheckAdmin_Handler,
		},
		{
			MethodName: "CheckRole",
			Handler:    _BotService_CheckRole_Handler,
		},
		{
			MethodName: "ChannelTyping",
			Handler:    _BotService_ChannelTyping_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _BotService_DeleteMessage_Handler,
		},
		{
			MethodName: "DeleteMessageSecond",
			Handler:    _BotService_DeleteMessageSecond_Handler,
		},
		{
			MethodName: "EditComplexButton",
			Handler:    _BotService_EditComplexButton_Handler,
		},
		{
			MethodName: "EditWebhook",
			Handler:    _BotService_EditWebhook_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _BotService_EditMessage_Handler,
		},
		{
			MethodName: "GetAvatarUrl",
			Handler:    _BotService_GetAvatarUrl_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _BotService_GetRoles_Handler,
		},
		{
			MethodName: "GetMembersRoles",
			Handler:    _BotService_GetMembersRoles_Handler,
		},
		{
			MethodName: "QueueSend",
			Handler:    _BotService_QueueSend_Handler,
		},
		{
			MethodName: "ReplaceTextMessage",
			Handler:    _BotService_ReplaceTextMessage_Handler,
		},
		{
			MethodName: "RoleToIdPing",
			Handler:    _BotService_RoleToIdPing_Handler,
		},
		{
			MethodName: "SendDmText",
			Handler:    _BotService_SendDmText_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _BotService_Send_Handler,
		},
		{
			MethodName: "SendBridgeArrayMessages",
			Handler:    _BotService_SendBridgeArrayMessages_Handler,
		},
		{
			MethodName: "SendChannelDelSecond",
			Handler:    _BotService_SendChannelDelSecond_Handler,
		},
		{
			MethodName: "SendEmbedTime",
			Handler:    _BotService_SendEmbedTime_Handler,
		},
		{
			MethodName: "SendComplexContent",
			Handler:    _BotService_SendComplexContent_Handler,
		},
		{
			MethodName: "SendComplex",
			Handler:    _BotService_SendComplex_Handler,
		},
		{
			MethodName: "SendEmbedText",
			Handler:    _BotService_SendEmbedText_Handler,
		},
		{
			MethodName: "SendHelp",
			Handler:    _BotService_SendHelp_Handler,
		},
		{
			MethodName: "SendPoll",
			Handler:    _BotService_SendPoll_Handler,
		},
		{
			MethodName: "SendPic",
			Handler:    _BotService_SendPic_Handler,
		},
		{
			MethodName: "SendWebhook",
			Handler:    _BotService_SendWebhook_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _BotService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _BotService_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discord.proto",
}
